/*
* generated by Xtext
*/
grammar InternalLuceneQuery;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipselabs.recommenders.codesearchquery.rcp.dsl.services.LuceneQueryGrammarAccess;

}

@parser::members {

 	private LuceneQueryGrammarAccess grammarAccess;
 	
    public InternalLuceneQueryParser(TokenStream input, LuceneQueryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Exp1";	
   	}
   	
   	@Override
   	protected LuceneQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleExp1
entryRuleExp1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExp1Rule()); }
	 iv_ruleExp1=ruleExp1 
	 { $current=$iv_ruleExp1.current; } 
	 EOF 
;

// Rule Exp1
ruleExp1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExp1Access().getExp2ParserRuleCall_0()); 
    }
    this_Exp2_0=ruleExp2
    { 
        $current = $this_Exp2_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getExp1Access().getExp1LeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExp1Access().getBBooleanExpEnumRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleBooleanExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExp1Rule());
	        }
       		set(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"BooleanExp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExp1Access().getRightExp2ParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleExp2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExp1Rule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Exp2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExp2
entryRuleExp2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExp2Rule()); }
	 iv_ruleExp2=ruleExp2 
	 { $current=$iv_ruleExp2.current; } 
	 EOF 
;

// Rule Exp2
ruleExp2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExp2Access().getValueClauseExpressionParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleClauseExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExp2Rule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ClauseExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExp2Access().getLeftParenthesisKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getExp2Access().getExp1ParserRuleCall_1_1()); 
    }
    this_Exp1_2=ruleExp1
    { 
        $current = $this_Exp1_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getExp2Access().getRightParenthesisKeyword_1_2());
    }
))
;





// Entry rule entryRuleClauseExpression
entryRuleClauseExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseExpressionRule()); }
	 iv_ruleClauseExpression=ruleClauseExpression 
	 { $current=$iv_ruleClauseExpression.current; } 
	 EOF 
;

// Rule ClauseExpression
ruleClauseExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseExpressionAccess().getClauseClauseParserRuleCall_0()); 
	    }
		lv_clause_0_0=ruleClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseExpressionRule());
	        }
       		set(
       			$current, 
       			"clause",
        		lv_clause_0_0, 
        		"Clause");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleClause
entryRuleClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClauseRule()); }
	 iv_ruleClause=ruleClause 
	 { $current=$iv_ruleClause.current; } 
	 EOF 
;

// Rule Clause
ruleClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getNNotExpressionEnumRuleCall_0_0()); 
	    }
		lv_n_0_0=ruleNotExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"n",
        		lv_n_0_0, 
        		"NotExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getFieldFieldNameEnumRuleCall_1_0()); 
	    }
		lv_field_1_0=ruleFieldName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"field",
        		lv_field_1_0, 
        		"FieldName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClauseAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClauseAccess().getValueFieldValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleFieldValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClauseRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"FieldValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFieldValue
entryRuleFieldValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldValueRule()); } 
	 iv_ruleFieldValue=ruleFieldValue 
	 { $current=$iv_ruleFieldValue.current.getText(); }  
	 EOF 
;

// Rule FieldValue
ruleFieldValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFieldValueAccess().getValueParserRuleCall_0()); 
    }
    this_Value_0=ruleValue    {
		$current.merge(this_Value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldValueAccess().getLeftParenthesisKeyword_1_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFieldValueAccess().getValueParserRuleCall_1_1()); 
    }
    this_Value_2=ruleValue    {
		$current.merge(this_Value_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFieldValueAccess().getRightParenthesisKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleValue
entryRuleValue returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); } 
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current.getText(); }  
	 EOF 
;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getValueAccess().getHyphenMinusKeyword_0_1()); 
    }
)?(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getValueAccess().getIDTerminalRuleCall_1_0()); 
    }

    |    this_STRING_3=RULE_STRING    {
		$current.merge(this_STRING_3);
    }

    { 
    newLeafNode(this_STRING_3, grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1_1()); 
    }
))
    ;





// Rule BooleanExp
ruleBooleanExp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='AND' 
	{
        $current = grammarAccess.getBooleanExpAccess().getAnd1EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBooleanExpAccess().getAnd1EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='and' 
	{
        $current = grammarAccess.getBooleanExpAccess().getAnd2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBooleanExpAccess().getAnd2EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='OR' 
	{
        $current = grammarAccess.getBooleanExpAccess().getOr1EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBooleanExpAccess().getOr1EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='or' 
	{
        $current = grammarAccess.getBooleanExpAccess().getOr2EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBooleanExpAccess().getOr2EnumLiteralDeclaration_3()); 
    }
));



// Rule NotExpression
ruleNotExpression returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='not' 
	{
        $current = grammarAccess.getNotExpressionAccess().getNot1EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getNotExpressionAccess().getNot1EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='NOT' 
	{
        $current = grammarAccess.getNotExpressionAccess().getNot2EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getNotExpressionAccess().getNot2EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='!' 
	{
        $current = grammarAccess.getNotExpressionAccess().getNot3EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getNotExpressionAccess().getNot3EnumLiteralDeclaration_2()); 
    }
));



// Rule FieldName
ruleFieldName returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='FullyQualifiedName' 
	{
        $current = grammarAccess.getFieldNameAccess().getFullyQualifiedNameEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFieldNameAccess().getFullyQualifiedNameEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='type' 
	{
        $current = grammarAccess.getFieldNameAccess().getTypeEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFieldNameAccess().getTypeEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='FriendlyName' 
	{
        $current = grammarAccess.getFieldNameAccess().getFriendlyNameEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFieldNameAccess().getFriendlyNameEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='ImplementedTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getImplementedTypesEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFieldNameAccess().getImplementedTypesEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='ExtendedTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getExtendedTypesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFieldNameAccess().getExtendedTypesEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='DeclaredMethods' 
	{
        $current = grammarAccess.getFieldNameAccess().getDeclaredMethodsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFieldNameAccess().getDeclaredMethodsEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='UsedTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedTypesEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFieldNameAccess().getUsedTypesEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='UsedTypesInTry' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedTypesInTryEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFieldNameAccess().getUsedTypesInTryEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='UsedTypesInFinally' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedTypesInFinallyEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFieldNameAccess().getUsedTypesInFinallyEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='ParameterTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getParameterTypesEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFieldNameAccess().getParameterTypesEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='ParameterCount' 
	{
        $current = grammarAccess.getFieldNameAccess().getParameterCountEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFieldNameAccess().getParameterCountEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='ReturnType' 
	{
        $current = grammarAccess.getFieldNameAccess().getReturnTypeEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getFieldNameAccess().getReturnTypeEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='ReturnVariableEexpressions' 
	{
        $current = grammarAccess.getFieldNameAccess().getReturnVariableEexpressionsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getFieldNameAccess().getReturnVariableEexpressionsEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='UsedMethods' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedMethodsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getFieldNameAccess().getUsedMethodsEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='UsedMethodsInTry' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedMethodsInTryEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getFieldNameAccess().getUsedMethodsInTryEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='UsedMethodsInFinally' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedMethodsInFinallyEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getFieldNameAccess().getUsedMethodsInFinallyEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='OverriddenMethods' 
	{
        $current = grammarAccess.getFieldNameAccess().getOverriddenMethodsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getFieldNameAccess().getOverriddenMethodsEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='AllImplementedTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getAllImplementedTypesEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getFieldNameAccess().getAllImplementedTypesEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='AllExtendedTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getAllExtendedTypesEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getFieldNameAccess().getAllExtendedTypesEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='FieldType' 
	{
        $current = grammarAccess.getFieldNameAccess().getFieldTypeEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getFieldNameAccess().getFieldTypeEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='DeclaringType' 
	{
        $current = grammarAccess.getFieldNameAccess().getDeclaringTypeEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getFieldNameAccess().getDeclaringTypeEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='CaughtType' 
	{
        $current = grammarAccess.getFieldNameAccess().getCaughtTypeEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getFieldNameAccess().getCaughtTypeEnumLiteralDeclaration_21()); 
    }
)
    |(	enumLiteral_22='ProjectName' 
	{
        $current = grammarAccess.getFieldNameAccess().getProjectNameEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getFieldNameAccess().getProjectNameEnumLiteralDeclaration_22()); 
    }
)
    |(	enumLiteral_23='ResourcePath' 
	{
        $current = grammarAccess.getFieldNameAccess().getResourcePathEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getFieldNameAccess().getResourcePathEnumLiteralDeclaration_23()); 
    }
)
    |(	enumLiteral_24='Modifiers' 
	{
        $current = grammarAccess.getFieldNameAccess().getModifiersEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getFieldNameAccess().getModifiersEnumLiteralDeclaration_24()); 
    }
)
    |(	enumLiteral_25='AllDeclaredMethodNames' 
	{
        $current = grammarAccess.getFieldNameAccess().getAllDeclaredMethodNamesEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getFieldNameAccess().getAllDeclaredMethodNamesEnumLiteralDeclaration_25()); 
    }
)
    |(	enumLiteral_26='DeclaredMethodNames' 
	{
        $current = grammarAccess.getFieldNameAccess().getDeclaredMethodNamesEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_26, grammarAccess.getFieldNameAccess().getDeclaredMethodNamesEnumLiteralDeclaration_26()); 
    }
)
    |(	enumLiteral_27='DeclaredFieldNames' 
	{
        $current = grammarAccess.getFieldNameAccess().getDeclaredFieldNamesEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_27, grammarAccess.getFieldNameAccess().getDeclaredFieldNamesEnumLiteralDeclaration_27()); 
    }
)
    |(	enumLiteral_28='DeclaredFieldTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getDeclaredFieldTypesEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_28, grammarAccess.getFieldNameAccess().getDeclaredFieldTypesEnumLiteralDeclaration_28()); 
    }
)
    |(	enumLiteral_29='AllDeclaredFieldNames' 
	{
        $current = grammarAccess.getFieldNameAccess().getAllDeclaredFieldNamesEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_29, grammarAccess.getFieldNameAccess().getAllDeclaredFieldNamesEnumLiteralDeclaration_29()); 
    }
)
    |(	enumLiteral_30='FullText' 
	{
        $current = grammarAccess.getFieldNameAccess().getFullTextEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_30, grammarAccess.getFieldNameAccess().getFullTextEnumLiteralDeclaration_30()); 
    }
)
    |(	enumLiteral_31='FieldsRead' 
	{
        $current = grammarAccess.getFieldNameAccess().getFieldsReadEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_31, grammarAccess.getFieldNameAccess().getFieldsReadEnumLiteralDeclaration_31()); 
    }
)
    |(	enumLiteral_32='FieldsWritten' 
	{
        $current = grammarAccess.getFieldNameAccess().getFieldsWrittenEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_32, grammarAccess.getFieldNameAccess().getFieldsWrittenEnumLiteralDeclaration_32()); 
    }
)
    |(	enumLiteral_33='UsedFieldsInFinally' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedFieldsInFinallyEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_33, grammarAccess.getFieldNameAccess().getUsedFieldsInFinallyEnumLiteralDeclaration_33()); 
    }
)
    |(	enumLiteral_34='UsedFieldsInTry' 
	{
        $current = grammarAccess.getFieldNameAccess().getUsedFieldsInTryEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_34, grammarAccess.getFieldNameAccess().getUsedFieldsInTryEnumLiteralDeclaration_34()); 
    }
)
    |(	enumLiteral_35='Annotations' 
	{
        $current = grammarAccess.getFieldNameAccess().getAnnotationsEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_35, grammarAccess.getFieldNameAccess().getAnnotationsEnumLiteralDeclaration_35()); 
    }
)
    |(	enumLiteral_36='InstanceofTypes' 
	{
        $current = grammarAccess.getFieldNameAccess().getInstanceofTypesEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_36, grammarAccess.getFieldNameAccess().getInstanceofTypesEnumLiteralDeclaration_36()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


