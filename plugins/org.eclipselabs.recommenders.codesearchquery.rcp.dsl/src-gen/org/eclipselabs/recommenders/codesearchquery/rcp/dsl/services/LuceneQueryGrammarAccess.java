/*
* generated by Xtext
*/

package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LuceneQueryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp1LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBBooleanExpEnumRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExp2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// * * 
		// *   Query  ::= ( Clause )*
		// *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" ) 
		// * * / Exp1 returns Expression:
		//	Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*;
		public ParserRule getRule() { return rule; }

		//Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*
		public Group getGroup() { return cGroup; }

		//Exp2
		public RuleCall getExp2ParserRuleCall_0() { return cExp2ParserRuleCall_0; }

		//({Exp1.left=current} b=BooleanExp right=Exp2)*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp1.left=current}
		public Action getExp1LeftAction_1_0() { return cExp1LeftAction_1_0; }

		//b=BooleanExp
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//BooleanExp
		public RuleCall getBBooleanExpEnumRuleCall_1_1_0() { return cBBooleanExpEnumRuleCall_1_1_0; }

		//right=Exp2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Exp2
		public RuleCall getRightExp2ParserRuleCall_1_2_0() { return cRightExp2ParserRuleCall_1_2_0; }
	}

	public class Exp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueClauseExpressionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExp1ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Exp2 returns Expression:
		//	value=ClauseExpression | "(" Exp1 ")";
		public ParserRule getRule() { return rule; }

		//value=ClauseExpression | "(" Exp1 ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=ClauseExpression
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ClauseExpression
		public RuleCall getValueClauseExpressionParserRuleCall_0_0() { return cValueClauseExpressionParserRuleCall_0_0; }

		//"(" Exp1 ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Exp1
		public RuleCall getExp1ParserRuleCall_1_1() { return cExp1ParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ClauseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClauseExpression");
		private final Assignment cClauseAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cClauseClauseParserRuleCall_0 = (RuleCall)cClauseAssignment.eContents().get(0);
		
		////	Query returns Expression: 
		////		{Query}
		////		clauseExpressions+=ClauseExpression*
		////	;
		//ClauseExpression:
		//	clause=Clause;
		public ParserRule getRule() { return rule; }

		//clause=Clause
		public Assignment getClauseAssignment() { return cClauseAssignment; }

		//Clause
		public RuleCall getClauseClauseParserRuleCall_0() { return cClauseClauseParserRuleCall_0; }
	}

	public class ClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Clause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNNotExpressionEnumRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldFieldNameEnumRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFieldValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Clause:
		//	n=NotExpression? field=FieldName ":" value=FieldValue;
		public ParserRule getRule() { return rule; }

		//n=NotExpression? field=FieldName ":" value=FieldValue
		public Group getGroup() { return cGroup; }

		//n=NotExpression?
		public Assignment getNAssignment_0() { return cNAssignment_0; }

		//NotExpression
		public RuleCall getNNotExpressionEnumRuleCall_0_0() { return cNNotExpressionEnumRuleCall_0_0; }

		//field=FieldName
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//FieldName
		public RuleCall getFieldFieldNameEnumRuleCall_1_0() { return cFieldFieldNameEnumRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=FieldValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//FieldValue
		public RuleCall getValueFieldValueParserRuleCall_3_0() { return cValueFieldValueParserRuleCall_3_0; }
	}

	public class FieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FieldValue:
		//	Value | "(" Value* ")";
		public ParserRule getRule() { return rule; }

		//Value | "(" Value* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//"(" Value* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Value*
		public RuleCall getValueParserRuleCall_1_1() { return cValueParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Value:
		//	("+" | "-")? (ID | STRING);
		public ParserRule getRule() { return rule; }

		//("+" | "-")? (ID | STRING)
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//ID | STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	
	
	public class BooleanExpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnd1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnd1ANDKeyword_0_0 = (Keyword)cAnd1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnd2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnd2AndKeyword_1_0 = (Keyword)cAnd2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOr1EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOr1ORKeyword_2_0 = (Keyword)cOr1EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOr2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOr2OrKeyword_3_0 = (Keyword)cOr2EnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BooleanExp:
		//	and1="AND" | and2="and" | or1="OR" | or2="or";
		public EnumRule getRule() { return rule; }

		//and1="AND" | and2="and" | or1="OR" | or2="or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and1="AND"
		public EnumLiteralDeclaration getAnd1EnumLiteralDeclaration_0() { return cAnd1EnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getAnd1ANDKeyword_0_0() { return cAnd1ANDKeyword_0_0; }

		//and2="and"
		public EnumLiteralDeclaration getAnd2EnumLiteralDeclaration_1() { return cAnd2EnumLiteralDeclaration_1; }

		//"and"
		public Keyword getAnd2AndKeyword_1_0() { return cAnd2AndKeyword_1_0; }

		//or1="OR"
		public EnumLiteralDeclaration getOr1EnumLiteralDeclaration_2() { return cOr1EnumLiteralDeclaration_2; }

		//"OR"
		public Keyword getOr1ORKeyword_2_0() { return cOr1ORKeyword_2_0; }

		//or2="or"
		public EnumLiteralDeclaration getOr2EnumLiteralDeclaration_3() { return cOr2EnumLiteralDeclaration_3; }

		//"or"
		public Keyword getOr2OrKeyword_3_0() { return cOr2OrKeyword_3_0; }
	}

	public class NotExpressionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNot1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNot1NotKeyword_0_0 = (Keyword)cNot1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot2NOTKeyword_1_0 = (Keyword)cNot2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNot3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNot3ExclamationMarkKeyword_2_0 = (Keyword)cNot3EnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NotExpression:
		//	not1="not" | not2="NOT" | not3="!";
		public EnumRule getRule() { return rule; }

		//not1="not" | not2="NOT" | not3="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//not1="not"
		public EnumLiteralDeclaration getNot1EnumLiteralDeclaration_0() { return cNot1EnumLiteralDeclaration_0; }

		//"not"
		public Keyword getNot1NotKeyword_0_0() { return cNot1NotKeyword_0_0; }

		//not2="NOT"
		public EnumLiteralDeclaration getNot2EnumLiteralDeclaration_1() { return cNot2EnumLiteralDeclaration_1; }

		//"NOT"
		public Keyword getNot2NOTKeyword_1_0() { return cNot2NOTKeyword_1_0; }

		//not3="!"
		public EnumLiteralDeclaration getNot3EnumLiteralDeclaration_2() { return cNot3EnumLiteralDeclaration_2; }

		//"!"
		public Keyword getNot3ExclamationMarkKeyword_2_0() { return cNot3ExclamationMarkKeyword_2_0; }
	}

	public class FieldNameElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFullyQualifiedNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFullyQualifiedNameFullyQualifiedNameKeyword_0_0 = (Keyword)cFullyQualifiedNameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTypeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTypeTypeKeyword_1_0 = (Keyword)cTypeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFriendlyNameEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFriendlyNameFriendlyNameKeyword_2_0 = (Keyword)cFriendlyNameEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cImplementedTypesEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cImplementedTypesImplementedTypesKeyword_3_0 = (Keyword)cImplementedTypesEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cExtendedTypesEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cExtendedTypesExtendedTypesKeyword_4_0 = (Keyword)cExtendedTypesEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDeclaredMethodsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDeclaredMethodsDeclaredMethodsKeyword_5_0 = (Keyword)cDeclaredMethodsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cUsedTypesEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cUsedTypesUsedTypesKeyword_6_0 = (Keyword)cUsedTypesEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUsedTypesInTryEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUsedTypesInTryUsedTypesInTryKeyword_7_0 = (Keyword)cUsedTypesInTryEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUsedTypesInFinallyEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUsedTypesInFinallyUsedTypesInFinallyKeyword_8_0 = (Keyword)cUsedTypesInFinallyEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cParameterTypesEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cParameterTypesParameterTypesKeyword_9_0 = (Keyword)cParameterTypesEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cParameterCountEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cParameterCountParameterCountKeyword_10_0 = (Keyword)cParameterCountEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cReturnTypeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cReturnTypeReturnTypeKeyword_11_0 = (Keyword)cReturnTypeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cReturnVariableEexpressionsEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cReturnVariableEexpressionsReturnVariableEexpressionsKeyword_12_0 = (Keyword)cReturnVariableEexpressionsEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cUsedMethodsEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cUsedMethodsUsedMethodsKeyword_13_0 = (Keyword)cUsedMethodsEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cUsedMethodsInTryEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cUsedMethodsInTryUsedMethodsInTryKeyword_14_0 = (Keyword)cUsedMethodsInTryEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cUsedMethodsInFinallyEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cUsedMethodsInFinallyUsedMethodsInFinallyKeyword_15_0 = (Keyword)cUsedMethodsInFinallyEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cOverriddenMethodsEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cOverriddenMethodsOverriddenMethodsKeyword_16_0 = (Keyword)cOverriddenMethodsEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cAllImplementedTypesEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cAllImplementedTypesAllImplementedTypesKeyword_17_0 = (Keyword)cAllImplementedTypesEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cAllExtendedTypesEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cAllExtendedTypesAllExtendedTypesKeyword_18_0 = (Keyword)cAllExtendedTypesEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cFieldTypeEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cFieldTypeFieldTypeKeyword_19_0 = (Keyword)cFieldTypeEnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cDeclaringTypeEnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cDeclaringTypeDeclaringTypeKeyword_20_0 = (Keyword)cDeclaringTypeEnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cCaughtTypeEnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cCaughtTypeCaughtTypeKeyword_21_0 = (Keyword)cCaughtTypeEnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cProjectNameEnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cProjectNameProjectNameKeyword_22_0 = (Keyword)cProjectNameEnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cResourcePathEnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cResourcePathResourcePathKeyword_23_0 = (Keyword)cResourcePathEnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cModifiersEnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cModifiersModifiersKeyword_24_0 = (Keyword)cModifiersEnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cAllDeclaredMethodNamesEnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_25_0 = (Keyword)cAllDeclaredMethodNamesEnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cDeclaredMethodNamesEnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cDeclaredMethodNamesDeclaredMethodNamesKeyword_26_0 = (Keyword)cDeclaredMethodNamesEnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cDeclaredFieldNamesEnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cDeclaredFieldNamesDeclaredFieldNamesKeyword_27_0 = (Keyword)cDeclaredFieldNamesEnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cDeclaredFieldTypesEnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cDeclaredFieldTypesDeclaredFieldTypesKeyword_28_0 = (Keyword)cDeclaredFieldTypesEnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cAllDeclaredFieldNamesEnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_29_0 = (Keyword)cAllDeclaredFieldNamesEnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cFullTextEnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cFullTextFullTextKeyword_30_0 = (Keyword)cFullTextEnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cFieldsReadEnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cFieldsReadFieldsReadKeyword_31_0 = (Keyword)cFieldsReadEnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cFieldsWrittenEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cFieldsWrittenFieldsWrittenKeyword_32_0 = (Keyword)cFieldsWrittenEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cUsedFieldsInFinallyEnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cUsedFieldsInFinallyUsedFieldsInFinallyKeyword_33_0 = (Keyword)cUsedFieldsInFinallyEnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cUsedFieldsInTryEnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cUsedFieldsInTryUsedFieldsInTryKeyword_34_0 = (Keyword)cUsedFieldsInTryEnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cAnnotationsEnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cAnnotationsAnnotationsKeyword_35_0 = (Keyword)cAnnotationsEnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cInstanceofTypesEnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cInstanceofTypesInstanceofTypesKeyword_36_0 = (Keyword)cInstanceofTypesEnumLiteralDeclaration_36.eContents().get(0);
		
		/// *
		//	The following rules are generated. Do not modify. Modify source file instead.
		// * / / *
		//	End of generated rules.
		// * / enum FieldName:
		//	FullyQualifiedName | type | FriendlyName | ImplementedTypes | ExtendedTypes | DeclaredMethods | UsedTypes |
		//	UsedTypesInTry | UsedTypesInFinally | ParameterTypes | ParameterCount | ReturnType | ReturnVariableEexpressions |
		//	UsedMethods | UsedMethodsInTry | UsedMethodsInFinally | OverriddenMethods | AllImplementedTypes | AllExtendedTypes |
		//	FieldType | DeclaringType | CaughtType | ProjectName | ResourcePath | Modifiers | AllDeclaredMethodNames |
		//	DeclaredMethodNames | DeclaredFieldNames | DeclaredFieldTypes | AllDeclaredFieldNames | FullText | FieldsRead |
		//	FieldsWritten | UsedFieldsInFinally | UsedFieldsInTry | Annotations | InstanceofTypes;
		public EnumRule getRule() { return rule; }

		//FullyQualifiedName | type | FriendlyName | ImplementedTypes | ExtendedTypes | DeclaredMethods | UsedTypes |
		//UsedTypesInTry | UsedTypesInFinally | ParameterTypes | ParameterCount | ReturnType | ReturnVariableEexpressions |
		//UsedMethods | UsedMethodsInTry | UsedMethodsInFinally | OverriddenMethods | AllImplementedTypes | AllExtendedTypes |
		//FieldType | DeclaringType | CaughtType | ProjectName | ResourcePath | Modifiers | AllDeclaredMethodNames |
		//DeclaredMethodNames | DeclaredFieldNames | DeclaredFieldTypes | AllDeclaredFieldNames | FullText | FieldsRead |
		//FieldsWritten | UsedFieldsInFinally | UsedFieldsInTry | Annotations | InstanceofTypes
		public Alternatives getAlternatives() { return cAlternatives; }

		//FullyQualifiedName
		public EnumLiteralDeclaration getFullyQualifiedNameEnumLiteralDeclaration_0() { return cFullyQualifiedNameEnumLiteralDeclaration_0; }

		//"FullyQualifiedName"
		public Keyword getFullyQualifiedNameFullyQualifiedNameKeyword_0_0() { return cFullyQualifiedNameFullyQualifiedNameKeyword_0_0; }

		//type
		public EnumLiteralDeclaration getTypeEnumLiteralDeclaration_1() { return cTypeEnumLiteralDeclaration_1; }

		//"type"
		public Keyword getTypeTypeKeyword_1_0() { return cTypeTypeKeyword_1_0; }

		//FriendlyName
		public EnumLiteralDeclaration getFriendlyNameEnumLiteralDeclaration_2() { return cFriendlyNameEnumLiteralDeclaration_2; }

		//"FriendlyName"
		public Keyword getFriendlyNameFriendlyNameKeyword_2_0() { return cFriendlyNameFriendlyNameKeyword_2_0; }

		//ImplementedTypes
		public EnumLiteralDeclaration getImplementedTypesEnumLiteralDeclaration_3() { return cImplementedTypesEnumLiteralDeclaration_3; }

		//"ImplementedTypes"
		public Keyword getImplementedTypesImplementedTypesKeyword_3_0() { return cImplementedTypesImplementedTypesKeyword_3_0; }

		//ExtendedTypes
		public EnumLiteralDeclaration getExtendedTypesEnumLiteralDeclaration_4() { return cExtendedTypesEnumLiteralDeclaration_4; }

		//"ExtendedTypes"
		public Keyword getExtendedTypesExtendedTypesKeyword_4_0() { return cExtendedTypesExtendedTypesKeyword_4_0; }

		//DeclaredMethods
		public EnumLiteralDeclaration getDeclaredMethodsEnumLiteralDeclaration_5() { return cDeclaredMethodsEnumLiteralDeclaration_5; }

		//"DeclaredMethods"
		public Keyword getDeclaredMethodsDeclaredMethodsKeyword_5_0() { return cDeclaredMethodsDeclaredMethodsKeyword_5_0; }

		//UsedTypes
		public EnumLiteralDeclaration getUsedTypesEnumLiteralDeclaration_6() { return cUsedTypesEnumLiteralDeclaration_6; }

		//"UsedTypes"
		public Keyword getUsedTypesUsedTypesKeyword_6_0() { return cUsedTypesUsedTypesKeyword_6_0; }

		//UsedTypesInTry
		public EnumLiteralDeclaration getUsedTypesInTryEnumLiteralDeclaration_7() { return cUsedTypesInTryEnumLiteralDeclaration_7; }

		//"UsedTypesInTry"
		public Keyword getUsedTypesInTryUsedTypesInTryKeyword_7_0() { return cUsedTypesInTryUsedTypesInTryKeyword_7_0; }

		//UsedTypesInFinally
		public EnumLiteralDeclaration getUsedTypesInFinallyEnumLiteralDeclaration_8() { return cUsedTypesInFinallyEnumLiteralDeclaration_8; }

		//"UsedTypesInFinally"
		public Keyword getUsedTypesInFinallyUsedTypesInFinallyKeyword_8_0() { return cUsedTypesInFinallyUsedTypesInFinallyKeyword_8_0; }

		//ParameterTypes
		public EnumLiteralDeclaration getParameterTypesEnumLiteralDeclaration_9() { return cParameterTypesEnumLiteralDeclaration_9; }

		//"ParameterTypes"
		public Keyword getParameterTypesParameterTypesKeyword_9_0() { return cParameterTypesParameterTypesKeyword_9_0; }

		//ParameterCount
		public EnumLiteralDeclaration getParameterCountEnumLiteralDeclaration_10() { return cParameterCountEnumLiteralDeclaration_10; }

		//"ParameterCount"
		public Keyword getParameterCountParameterCountKeyword_10_0() { return cParameterCountParameterCountKeyword_10_0; }

		//ReturnType
		public EnumLiteralDeclaration getReturnTypeEnumLiteralDeclaration_11() { return cReturnTypeEnumLiteralDeclaration_11; }

		//"ReturnType"
		public Keyword getReturnTypeReturnTypeKeyword_11_0() { return cReturnTypeReturnTypeKeyword_11_0; }

		//ReturnVariableEexpressions
		public EnumLiteralDeclaration getReturnVariableEexpressionsEnumLiteralDeclaration_12() { return cReturnVariableEexpressionsEnumLiteralDeclaration_12; }

		//"ReturnVariableEexpressions"
		public Keyword getReturnVariableEexpressionsReturnVariableEexpressionsKeyword_12_0() { return cReturnVariableEexpressionsReturnVariableEexpressionsKeyword_12_0; }

		//UsedMethods
		public EnumLiteralDeclaration getUsedMethodsEnumLiteralDeclaration_13() { return cUsedMethodsEnumLiteralDeclaration_13; }

		//"UsedMethods"
		public Keyword getUsedMethodsUsedMethodsKeyword_13_0() { return cUsedMethodsUsedMethodsKeyword_13_0; }

		//UsedMethodsInTry
		public EnumLiteralDeclaration getUsedMethodsInTryEnumLiteralDeclaration_14() { return cUsedMethodsInTryEnumLiteralDeclaration_14; }

		//"UsedMethodsInTry"
		public Keyword getUsedMethodsInTryUsedMethodsInTryKeyword_14_0() { return cUsedMethodsInTryUsedMethodsInTryKeyword_14_0; }

		//UsedMethodsInFinally
		public EnumLiteralDeclaration getUsedMethodsInFinallyEnumLiteralDeclaration_15() { return cUsedMethodsInFinallyEnumLiteralDeclaration_15; }

		//"UsedMethodsInFinally"
		public Keyword getUsedMethodsInFinallyUsedMethodsInFinallyKeyword_15_0() { return cUsedMethodsInFinallyUsedMethodsInFinallyKeyword_15_0; }

		//OverriddenMethods
		public EnumLiteralDeclaration getOverriddenMethodsEnumLiteralDeclaration_16() { return cOverriddenMethodsEnumLiteralDeclaration_16; }

		//"OverriddenMethods"
		public Keyword getOverriddenMethodsOverriddenMethodsKeyword_16_0() { return cOverriddenMethodsOverriddenMethodsKeyword_16_0; }

		//AllImplementedTypes
		public EnumLiteralDeclaration getAllImplementedTypesEnumLiteralDeclaration_17() { return cAllImplementedTypesEnumLiteralDeclaration_17; }

		//"AllImplementedTypes"
		public Keyword getAllImplementedTypesAllImplementedTypesKeyword_17_0() { return cAllImplementedTypesAllImplementedTypesKeyword_17_0; }

		//AllExtendedTypes
		public EnumLiteralDeclaration getAllExtendedTypesEnumLiteralDeclaration_18() { return cAllExtendedTypesEnumLiteralDeclaration_18; }

		//"AllExtendedTypes"
		public Keyword getAllExtendedTypesAllExtendedTypesKeyword_18_0() { return cAllExtendedTypesAllExtendedTypesKeyword_18_0; }

		//FieldType
		public EnumLiteralDeclaration getFieldTypeEnumLiteralDeclaration_19() { return cFieldTypeEnumLiteralDeclaration_19; }

		//"FieldType"
		public Keyword getFieldTypeFieldTypeKeyword_19_0() { return cFieldTypeFieldTypeKeyword_19_0; }

		//DeclaringType
		public EnumLiteralDeclaration getDeclaringTypeEnumLiteralDeclaration_20() { return cDeclaringTypeEnumLiteralDeclaration_20; }

		//"DeclaringType"
		public Keyword getDeclaringTypeDeclaringTypeKeyword_20_0() { return cDeclaringTypeDeclaringTypeKeyword_20_0; }

		//CaughtType
		public EnumLiteralDeclaration getCaughtTypeEnumLiteralDeclaration_21() { return cCaughtTypeEnumLiteralDeclaration_21; }

		//"CaughtType"
		public Keyword getCaughtTypeCaughtTypeKeyword_21_0() { return cCaughtTypeCaughtTypeKeyword_21_0; }

		//ProjectName
		public EnumLiteralDeclaration getProjectNameEnumLiteralDeclaration_22() { return cProjectNameEnumLiteralDeclaration_22; }

		//"ProjectName"
		public Keyword getProjectNameProjectNameKeyword_22_0() { return cProjectNameProjectNameKeyword_22_0; }

		//ResourcePath
		public EnumLiteralDeclaration getResourcePathEnumLiteralDeclaration_23() { return cResourcePathEnumLiteralDeclaration_23; }

		//"ResourcePath"
		public Keyword getResourcePathResourcePathKeyword_23_0() { return cResourcePathResourcePathKeyword_23_0; }

		//Modifiers
		public EnumLiteralDeclaration getModifiersEnumLiteralDeclaration_24() { return cModifiersEnumLiteralDeclaration_24; }

		//"Modifiers"
		public Keyword getModifiersModifiersKeyword_24_0() { return cModifiersModifiersKeyword_24_0; }

		//AllDeclaredMethodNames
		public EnumLiteralDeclaration getAllDeclaredMethodNamesEnumLiteralDeclaration_25() { return cAllDeclaredMethodNamesEnumLiteralDeclaration_25; }

		//"AllDeclaredMethodNames"
		public Keyword getAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_25_0() { return cAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_25_0; }

		//DeclaredMethodNames
		public EnumLiteralDeclaration getDeclaredMethodNamesEnumLiteralDeclaration_26() { return cDeclaredMethodNamesEnumLiteralDeclaration_26; }

		//"DeclaredMethodNames"
		public Keyword getDeclaredMethodNamesDeclaredMethodNamesKeyword_26_0() { return cDeclaredMethodNamesDeclaredMethodNamesKeyword_26_0; }

		//DeclaredFieldNames
		public EnumLiteralDeclaration getDeclaredFieldNamesEnumLiteralDeclaration_27() { return cDeclaredFieldNamesEnumLiteralDeclaration_27; }

		//"DeclaredFieldNames"
		public Keyword getDeclaredFieldNamesDeclaredFieldNamesKeyword_27_0() { return cDeclaredFieldNamesDeclaredFieldNamesKeyword_27_0; }

		//DeclaredFieldTypes
		public EnumLiteralDeclaration getDeclaredFieldTypesEnumLiteralDeclaration_28() { return cDeclaredFieldTypesEnumLiteralDeclaration_28; }

		//"DeclaredFieldTypes"
		public Keyword getDeclaredFieldTypesDeclaredFieldTypesKeyword_28_0() { return cDeclaredFieldTypesDeclaredFieldTypesKeyword_28_0; }

		//AllDeclaredFieldNames
		public EnumLiteralDeclaration getAllDeclaredFieldNamesEnumLiteralDeclaration_29() { return cAllDeclaredFieldNamesEnumLiteralDeclaration_29; }

		//"AllDeclaredFieldNames"
		public Keyword getAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_29_0() { return cAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_29_0; }

		//FullText
		public EnumLiteralDeclaration getFullTextEnumLiteralDeclaration_30() { return cFullTextEnumLiteralDeclaration_30; }

		//"FullText"
		public Keyword getFullTextFullTextKeyword_30_0() { return cFullTextFullTextKeyword_30_0; }

		//FieldsRead
		public EnumLiteralDeclaration getFieldsReadEnumLiteralDeclaration_31() { return cFieldsReadEnumLiteralDeclaration_31; }

		//"FieldsRead"
		public Keyword getFieldsReadFieldsReadKeyword_31_0() { return cFieldsReadFieldsReadKeyword_31_0; }

		//FieldsWritten
		public EnumLiteralDeclaration getFieldsWrittenEnumLiteralDeclaration_32() { return cFieldsWrittenEnumLiteralDeclaration_32; }

		//"FieldsWritten"
		public Keyword getFieldsWrittenFieldsWrittenKeyword_32_0() { return cFieldsWrittenFieldsWrittenKeyword_32_0; }

		//UsedFieldsInFinally
		public EnumLiteralDeclaration getUsedFieldsInFinallyEnumLiteralDeclaration_33() { return cUsedFieldsInFinallyEnumLiteralDeclaration_33; }

		//"UsedFieldsInFinally"
		public Keyword getUsedFieldsInFinallyUsedFieldsInFinallyKeyword_33_0() { return cUsedFieldsInFinallyUsedFieldsInFinallyKeyword_33_0; }

		//UsedFieldsInTry
		public EnumLiteralDeclaration getUsedFieldsInTryEnumLiteralDeclaration_34() { return cUsedFieldsInTryEnumLiteralDeclaration_34; }

		//"UsedFieldsInTry"
		public Keyword getUsedFieldsInTryUsedFieldsInTryKeyword_34_0() { return cUsedFieldsInTryUsedFieldsInTryKeyword_34_0; }

		//Annotations
		public EnumLiteralDeclaration getAnnotationsEnumLiteralDeclaration_35() { return cAnnotationsEnumLiteralDeclaration_35; }

		//"Annotations"
		public Keyword getAnnotationsAnnotationsKeyword_35_0() { return cAnnotationsAnnotationsKeyword_35_0; }

		//InstanceofTypes
		public EnumLiteralDeclaration getInstanceofTypesEnumLiteralDeclaration_36() { return cInstanceofTypesEnumLiteralDeclaration_36; }

		//"InstanceofTypes"
		public Keyword getInstanceofTypesInstanceofTypesKeyword_36_0() { return cInstanceofTypesInstanceofTypesKeyword_36_0; }
	}
	
	private Exp1Elements pExp1;
	private Exp2Elements pExp2;
	private ClauseExpressionElements pClauseExpression;
	private ClauseElements pClause;
	private FieldValueElements pFieldValue;
	private ValueElements pValue;
	private BooleanExpElements unknownRuleBooleanExp;
	private NotExpressionElements unknownRuleNotExpression;
	private FieldNameElements unknownRuleFieldName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LuceneQueryGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * * 
	// *   Query  ::= ( Clause )*
	// *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" ) 
	// * * / Exp1 returns Expression:
	//	Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*;
	public Exp1Elements getExp1Access() {
		return (pExp1 != null) ? pExp1 : (pExp1 = new Exp1Elements());
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}

	//Exp2 returns Expression:
	//	value=ClauseExpression | "(" Exp1 ")";
	public Exp2Elements getExp2Access() {
		return (pExp2 != null) ? pExp2 : (pExp2 = new Exp2Elements());
	}
	
	public ParserRule getExp2Rule() {
		return getExp2Access().getRule();
	}

	////	Query returns Expression: 
	////		{Query}
	////		clauseExpressions+=ClauseExpression*
	////	;
	//ClauseExpression:
	//	clause=Clause;
	public ClauseExpressionElements getClauseExpressionAccess() {
		return (pClauseExpression != null) ? pClauseExpression : (pClauseExpression = new ClauseExpressionElements());
	}
	
	public ParserRule getClauseExpressionRule() {
		return getClauseExpressionAccess().getRule();
	}

	//Clause:
	//	n=NotExpression? field=FieldName ":" value=FieldValue;
	public ClauseElements getClauseAccess() {
		return (pClause != null) ? pClause : (pClause = new ClauseElements());
	}
	
	public ParserRule getClauseRule() {
		return getClauseAccess().getRule();
	}

	//FieldValue:
	//	Value | "(" Value* ")";
	public FieldValueElements getFieldValueAccess() {
		return (pFieldValue != null) ? pFieldValue : (pFieldValue = new FieldValueElements());
	}
	
	public ParserRule getFieldValueRule() {
		return getFieldValueAccess().getRule();
	}

	//Value:
	//	("+" | "-")? (ID | STRING);
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//enum BooleanExp:
	//	and1="AND" | and2="and" | or1="OR" | or2="or";
	public BooleanExpElements getBooleanExpAccess() {
		return (unknownRuleBooleanExp != null) ? unknownRuleBooleanExp : (unknownRuleBooleanExp = new BooleanExpElements());
	}
	
	public EnumRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}

	//enum NotExpression:
	//	not1="not" | not2="NOT" | not3="!";
	public NotExpressionElements getNotExpressionAccess() {
		return (unknownRuleNotExpression != null) ? unknownRuleNotExpression : (unknownRuleNotExpression = new NotExpressionElements());
	}
	
	public EnumRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	/// *
	//	The following rules are generated. Do not modify. Modify source file instead.
	// * / / *
	//	End of generated rules.
	// * / enum FieldName:
	//	FullyQualifiedName | type | FriendlyName | ImplementedTypes | ExtendedTypes | DeclaredMethods | UsedTypes |
	//	UsedTypesInTry | UsedTypesInFinally | ParameterTypes | ParameterCount | ReturnType | ReturnVariableEexpressions |
	//	UsedMethods | UsedMethodsInTry | UsedMethodsInFinally | OverriddenMethods | AllImplementedTypes | AllExtendedTypes |
	//	FieldType | DeclaringType | CaughtType | ProjectName | ResourcePath | Modifiers | AllDeclaredMethodNames |
	//	DeclaredMethodNames | DeclaredFieldNames | DeclaredFieldTypes | AllDeclaredFieldNames | FullText | FieldsRead |
	//	FieldsWritten | UsedFieldsInFinally | UsedFieldsInTry | Annotations | InstanceofTypes;
	public FieldNameElements getFieldNameAccess() {
		return (unknownRuleFieldName != null) ? unknownRuleFieldName : (unknownRuleFieldName = new FieldNameElements());
	}
	
	public EnumRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
