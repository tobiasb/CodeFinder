/*
* generated by Xtext
*/

package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class LuceneQueryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp1LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBBooleanExpEnumRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExp2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// * * 
		//
		// *   Query  ::= ( Clause )*
		//
		// *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
		//
		// * 	
		//
		// * 
		//
		// * Example: FriendlyName:(+"toString" -"toUpperCase") AND ReturnType:"Ljava/lang/String"
		//
		// * * / Exp1 returns Expression:
		//	Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*;
		public ParserRule getRule() { return rule; }

		//Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*
		public Group getGroup() { return cGroup; }

		//Exp2
		public RuleCall getExp2ParserRuleCall_0() { return cExp2ParserRuleCall_0; }

		//({Exp1.left=current} b=BooleanExp right=Exp2)*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp1.left=current}
		public Action getExp1LeftAction_1_0() { return cExp1LeftAction_1_0; }

		//b=BooleanExp
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//BooleanExp
		public RuleCall getBBooleanExpEnumRuleCall_1_1_0() { return cBBooleanExpEnumRuleCall_1_1_0; }

		//right=Exp2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Exp2
		public RuleCall getRightExp2ParserRuleCall_1_2_0() { return cRightExp2ParserRuleCall_1_2_0; }
	}

	public class Exp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueClauseExpressionParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExp1ParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Exp2 returns Expression:
		//	value=ClauseExpression | "(" Exp1 ")";
		public ParserRule getRule() { return rule; }

		//value=ClauseExpression | "(" Exp1 ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=ClauseExpression
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//ClauseExpression
		public RuleCall getValueClauseExpressionParserRuleCall_0_0() { return cValueClauseExpressionParserRuleCall_0_0; }

		//"(" Exp1 ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Exp1
		public RuleCall getExp1ParserRuleCall_1_1() { return cExp1ParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ClauseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClauseExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cClauseAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cClauseSimpleClauseParserRuleCall_0_0 = (RuleCall)cClauseAssignment_0.eContents().get(0);
		private final Assignment cClauseAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cClauseTypeClauseParserRuleCall_1_0 = (RuleCall)cClauseAssignment_1.eContents().get(0);
		
		////	Query returns Expression: 
		//
		////		{Query}
		//
		////		clauseExpressions+=ClauseExpression*
		//
		////	;
		//
		//ClauseExpression:
		//	clause=SimpleClause | clause=TypeClause;
		public ParserRule getRule() { return rule; }

		//clause=SimpleClause | clause=TypeClause
		public Alternatives getAlternatives() { return cAlternatives; }

		//clause=SimpleClause
		public Assignment getClauseAssignment_0() { return cClauseAssignment_0; }

		//SimpleClause
		public RuleCall getClauseSimpleClauseParserRuleCall_0_0() { return cClauseSimpleClauseParserRuleCall_0_0; }

		//clause=TypeClause
		public Assignment getClauseAssignment_1() { return cClauseAssignment_1; }

		//TypeClause
		public RuleCall getClauseTypeClauseParserRuleCall_1_0() { return cClauseTypeClauseParserRuleCall_1_0; }
	}

	public class SimpleClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNNotExpressionEnumRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldFieldNameParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueFieldValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SimpleClause:
		//	n=NotExpression? field=FieldName ":" value=FieldValue;
		public ParserRule getRule() { return rule; }

		//n=NotExpression? field=FieldName ":" value=FieldValue
		public Group getGroup() { return cGroup; }

		//n=NotExpression?
		public Assignment getNAssignment_0() { return cNAssignment_0; }

		//NotExpression
		public RuleCall getNNotExpressionEnumRuleCall_0_0() { return cNNotExpressionEnumRuleCall_0_0; }

		//field=FieldName
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//FieldName
		public RuleCall getFieldFieldNameParserRuleCall_1_0() { return cFieldFieldNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=FieldValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//FieldValue
		public RuleCall getValueFieldValueParserRuleCall_3_0() { return cValueFieldValueParserRuleCall_3_0; }
	}

	public class TypeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNNotExpressionEnumRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldTypeFieldNameParserRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueTypeTestParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//TypeClause:
		//	n=NotExpression? field=TypeFieldName ":" value=TypeTest;
		public ParserRule getRule() { return rule; }

		//n=NotExpression? field=TypeFieldName ":" value=TypeTest
		public Group getGroup() { return cGroup; }

		//n=NotExpression?
		public Assignment getNAssignment_0() { return cNAssignment_0; }

		//NotExpression
		public RuleCall getNNotExpressionEnumRuleCall_0_0() { return cNNotExpressionEnumRuleCall_0_0; }

		//field=TypeFieldName
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//TypeFieldName
		public RuleCall getFieldTypeFieldNameParserRuleCall_1_0() { return cFieldTypeFieldNameParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=TypeTest
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//TypeTest
		public RuleCall getValueTypeTestParserRuleCall_3_0() { return cValueTypeTestParserRuleCall_3_0; }
	}

	public class FieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValueParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//FieldValue:
		//	Value | "(" Value* ")";
		public ParserRule getRule() { return rule; }

		//Value | "(" Value* ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }

		//"(" Value* ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Value*
		public RuleCall getValueParserRuleCall_1_1() { return cValueParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class TypeTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTest1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTest1Test1Keyword_0_0 = (Keyword)cTest1Assignment_0.eContents().get(0);
		private final Assignment cTest2Assignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTest2Test2Keyword_1_0 = (Keyword)cTest2Assignment_1.eContents().get(0);
		
		//TypeTest:
		//	test1="test1" | test2="test2";
		public ParserRule getRule() { return rule; }

		//test1="test1" | test2="test2"
		public Alternatives getAlternatives() { return cAlternatives; }

		//test1="test1"
		public Assignment getTest1Assignment_0() { return cTest1Assignment_0; }

		//"test1"
		public Keyword getTest1Test1Keyword_0_0() { return cTest1Test1Keyword_0_0; }

		//test2="test2"
		public Assignment getTest2Assignment_1() { return cTest2Assignment_1; }

		//"test2"
		public Keyword getTest2Test2Keyword_1_0() { return cTest2Test2Keyword_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Value:
		//	("+" | "-")? (ID | STRING);
		public ParserRule getRule() { return rule; }

		//("+" | "-")? (ID | STRING)
		public Group getGroup() { return cGroup; }

		//("+" | "-")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_0() { return cPlusSignKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//ID | STRING
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}

	public class FieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFullyQualifiedNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cFullyQualifiedNameFullyQualifiedNameKeyword_0_0 = (Keyword)cFullyQualifiedNameAssignment_0.eContents().get(0);
		private final Assignment cFriendlyNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFriendlyNameFriendlyNameKeyword_1_0 = (Keyword)cFriendlyNameAssignment_1.eContents().get(0);
		private final Assignment cDeclaredMethodsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDeclaredMethodsDeclaredMethodsKeyword_2_0 = (Keyword)cDeclaredMethodsAssignment_2.eContents().get(0);
		private final Assignment cParameterCountAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cParameterCountParameterCountKeyword_3_0 = (Keyword)cParameterCountAssignment_3.eContents().get(0);
		private final Assignment cReturnVariableEexpressionsAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cReturnVariableEexpressionsReturnVariableEexpressionsKeyword_4_0 = (Keyword)cReturnVariableEexpressionsAssignment_4.eContents().get(0);
		private final Assignment cUsedMethodsAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cUsedMethodsUsedMethodsKeyword_5_0 = (Keyword)cUsedMethodsAssignment_5.eContents().get(0);
		private final Assignment cUsedMethodsInTryAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cUsedMethodsInTryUsedMethodsInTryKeyword_6_0 = (Keyword)cUsedMethodsInTryAssignment_6.eContents().get(0);
		private final Assignment cUsedMethodsInFinallyAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cUsedMethodsInFinallyUsedMethodsInFinallyKeyword_7_0 = (Keyword)cUsedMethodsInFinallyAssignment_7.eContents().get(0);
		private final Assignment cOverriddenMethodsAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cOverriddenMethodsOverriddenMethodsKeyword_8_0 = (Keyword)cOverriddenMethodsAssignment_8.eContents().get(0);
		private final Assignment cProjectNameAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cProjectNameProjectNameKeyword_9_0 = (Keyword)cProjectNameAssignment_9.eContents().get(0);
		private final Assignment cResourcePathAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cResourcePathResourcePathKeyword_10_0 = (Keyword)cResourcePathAssignment_10.eContents().get(0);
		private final Assignment cModifiersAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cModifiersModifiersKeyword_11_0 = (Keyword)cModifiersAssignment_11.eContents().get(0);
		private final Assignment cAllDeclaredMethodNamesAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_12_0 = (Keyword)cAllDeclaredMethodNamesAssignment_12.eContents().get(0);
		private final Assignment cDeclaredMethodNamesAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cDeclaredMethodNamesDeclaredMethodNamesKeyword_13_0 = (Keyword)cDeclaredMethodNamesAssignment_13.eContents().get(0);
		private final Assignment cDeclaredFieldNamesAssignment_14 = (Assignment)cAlternatives.eContents().get(14);
		private final Keyword cDeclaredFieldNamesDeclaredFieldNamesKeyword_14_0 = (Keyword)cDeclaredFieldNamesAssignment_14.eContents().get(0);
		private final Assignment cDeclaredFieldTypesAssignment_15 = (Assignment)cAlternatives.eContents().get(15);
		private final Keyword cDeclaredFieldTypesDeclaredFieldTypesKeyword_15_0 = (Keyword)cDeclaredFieldTypesAssignment_15.eContents().get(0);
		private final Assignment cAllDeclaredFieldNamesAssignment_16 = (Assignment)cAlternatives.eContents().get(16);
		private final Keyword cAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_16_0 = (Keyword)cAllDeclaredFieldNamesAssignment_16.eContents().get(0);
		private final Assignment cFullTextAssignment_17 = (Assignment)cAlternatives.eContents().get(17);
		private final Keyword cFullTextFullTextKeyword_17_0 = (Keyword)cFullTextAssignment_17.eContents().get(0);
		private final Assignment cFieldsReadAssignment_18 = (Assignment)cAlternatives.eContents().get(18);
		private final Keyword cFieldsReadFieldsReadKeyword_18_0 = (Keyword)cFieldsReadAssignment_18.eContents().get(0);
		private final Assignment cFieldsWrittenAssignment_19 = (Assignment)cAlternatives.eContents().get(19);
		private final Keyword cFieldsWrittenFieldsWrittenKeyword_19_0 = (Keyword)cFieldsWrittenAssignment_19.eContents().get(0);
		private final Assignment cUsedFieldsInFinallyAssignment_20 = (Assignment)cAlternatives.eContents().get(20);
		private final Keyword cUsedFieldsInFinallyUsedFieldsInFinallyKeyword_20_0 = (Keyword)cUsedFieldsInFinallyAssignment_20.eContents().get(0);
		private final Assignment cUsedFieldsInTryAssignment_21 = (Assignment)cAlternatives.eContents().get(21);
		private final Keyword cUsedFieldsInTryUsedFieldsInTryKeyword_21_0 = (Keyword)cUsedFieldsInTryAssignment_21.eContents().get(0);
		private final Assignment cAnnotationsAssignment_22 = (Assignment)cAlternatives.eContents().get(22);
		private final Keyword cAnnotationsAnnotationsKeyword_22_0 = (Keyword)cAnnotationsAssignment_22.eContents().get(0);
		private final Assignment cTimestampAssignment_23 = (Assignment)cAlternatives.eContents().get(23);
		private final Keyword cTimestampTimestampKeyword_23_0 = (Keyword)cTimestampAssignment_23.eContents().get(0);
		
		/// *
		//
		//	The following rules are generated. Do not modify. Modify source file instead.
		//
		// * / FieldName:
		//	FullyQualifiedName="FullyQualifiedName" | FriendlyName="FriendlyName" | DeclaredMethods="DeclaredMethods" |
		//	ParameterCount="ParameterCount" | ReturnVariableEexpressions="ReturnVariableEexpressions" | UsedMethods="UsedMethods"
		//	| UsedMethodsInTry="UsedMethodsInTry" | UsedMethodsInFinally="UsedMethodsInFinally" |
		//	OverriddenMethods="OverriddenMethods" | ProjectName="ProjectName" | ResourcePath="ResourcePath" |
		//	Modifiers="Modifiers" | AllDeclaredMethodNames="AllDeclaredMethodNames" | DeclaredMethodNames="DeclaredMethodNames" |
		//	DeclaredFieldNames="DeclaredFieldNames" | DeclaredFieldTypes="DeclaredFieldTypes" |
		//	AllDeclaredFieldNames="AllDeclaredFieldNames" | FullText="FullText" | FieldsRead="FieldsRead" |
		//	FieldsWritten="FieldsWritten" | UsedFieldsInFinally="UsedFieldsInFinally" | UsedFieldsInTry="UsedFieldsInTry" |
		//	Annotations="Annotations" | Timestamp="Timestamp";
		public ParserRule getRule() { return rule; }

		//FullyQualifiedName="FullyQualifiedName" | FriendlyName="FriendlyName" | DeclaredMethods="DeclaredMethods" |
		//ParameterCount="ParameterCount" | ReturnVariableEexpressions="ReturnVariableEexpressions" | UsedMethods="UsedMethods" |
		//UsedMethodsInTry="UsedMethodsInTry" | UsedMethodsInFinally="UsedMethodsInFinally" |
		//OverriddenMethods="OverriddenMethods" | ProjectName="ProjectName" | ResourcePath="ResourcePath" | Modifiers="Modifiers"
		//| AllDeclaredMethodNames="AllDeclaredMethodNames" | DeclaredMethodNames="DeclaredMethodNames" |
		//DeclaredFieldNames="DeclaredFieldNames" | DeclaredFieldTypes="DeclaredFieldTypes" |
		//AllDeclaredFieldNames="AllDeclaredFieldNames" | FullText="FullText" | FieldsRead="FieldsRead" |
		//FieldsWritten="FieldsWritten" | UsedFieldsInFinally="UsedFieldsInFinally" | UsedFieldsInTry="UsedFieldsInTry" |
		//Annotations="Annotations" | Timestamp="Timestamp"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FullyQualifiedName="FullyQualifiedName"
		public Assignment getFullyQualifiedNameAssignment_0() { return cFullyQualifiedNameAssignment_0; }

		//"FullyQualifiedName"
		public Keyword getFullyQualifiedNameFullyQualifiedNameKeyword_0_0() { return cFullyQualifiedNameFullyQualifiedNameKeyword_0_0; }

		//FriendlyName="FriendlyName"
		public Assignment getFriendlyNameAssignment_1() { return cFriendlyNameAssignment_1; }

		//"FriendlyName"
		public Keyword getFriendlyNameFriendlyNameKeyword_1_0() { return cFriendlyNameFriendlyNameKeyword_1_0; }

		//DeclaredMethods="DeclaredMethods"
		public Assignment getDeclaredMethodsAssignment_2() { return cDeclaredMethodsAssignment_2; }

		//"DeclaredMethods"
		public Keyword getDeclaredMethodsDeclaredMethodsKeyword_2_0() { return cDeclaredMethodsDeclaredMethodsKeyword_2_0; }

		//ParameterCount="ParameterCount"
		public Assignment getParameterCountAssignment_3() { return cParameterCountAssignment_3; }

		//"ParameterCount"
		public Keyword getParameterCountParameterCountKeyword_3_0() { return cParameterCountParameterCountKeyword_3_0; }

		//ReturnVariableEexpressions="ReturnVariableEexpressions"
		public Assignment getReturnVariableEexpressionsAssignment_4() { return cReturnVariableEexpressionsAssignment_4; }

		//"ReturnVariableEexpressions"
		public Keyword getReturnVariableEexpressionsReturnVariableEexpressionsKeyword_4_0() { return cReturnVariableEexpressionsReturnVariableEexpressionsKeyword_4_0; }

		//UsedMethods="UsedMethods"
		public Assignment getUsedMethodsAssignment_5() { return cUsedMethodsAssignment_5; }

		//"UsedMethods"
		public Keyword getUsedMethodsUsedMethodsKeyword_5_0() { return cUsedMethodsUsedMethodsKeyword_5_0; }

		//UsedMethodsInTry="UsedMethodsInTry"
		public Assignment getUsedMethodsInTryAssignment_6() { return cUsedMethodsInTryAssignment_6; }

		//"UsedMethodsInTry"
		public Keyword getUsedMethodsInTryUsedMethodsInTryKeyword_6_0() { return cUsedMethodsInTryUsedMethodsInTryKeyword_6_0; }

		//UsedMethodsInFinally="UsedMethodsInFinally"
		public Assignment getUsedMethodsInFinallyAssignment_7() { return cUsedMethodsInFinallyAssignment_7; }

		//"UsedMethodsInFinally"
		public Keyword getUsedMethodsInFinallyUsedMethodsInFinallyKeyword_7_0() { return cUsedMethodsInFinallyUsedMethodsInFinallyKeyword_7_0; }

		//OverriddenMethods="OverriddenMethods"
		public Assignment getOverriddenMethodsAssignment_8() { return cOverriddenMethodsAssignment_8; }

		//"OverriddenMethods"
		public Keyword getOverriddenMethodsOverriddenMethodsKeyword_8_0() { return cOverriddenMethodsOverriddenMethodsKeyword_8_0; }

		//ProjectName="ProjectName"
		public Assignment getProjectNameAssignment_9() { return cProjectNameAssignment_9; }

		//"ProjectName"
		public Keyword getProjectNameProjectNameKeyword_9_0() { return cProjectNameProjectNameKeyword_9_0; }

		//ResourcePath="ResourcePath"
		public Assignment getResourcePathAssignment_10() { return cResourcePathAssignment_10; }

		//"ResourcePath"
		public Keyword getResourcePathResourcePathKeyword_10_0() { return cResourcePathResourcePathKeyword_10_0; }

		//Modifiers="Modifiers"
		public Assignment getModifiersAssignment_11() { return cModifiersAssignment_11; }

		//"Modifiers"
		public Keyword getModifiersModifiersKeyword_11_0() { return cModifiersModifiersKeyword_11_0; }

		//AllDeclaredMethodNames="AllDeclaredMethodNames"
		public Assignment getAllDeclaredMethodNamesAssignment_12() { return cAllDeclaredMethodNamesAssignment_12; }

		//"AllDeclaredMethodNames"
		public Keyword getAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_12_0() { return cAllDeclaredMethodNamesAllDeclaredMethodNamesKeyword_12_0; }

		//DeclaredMethodNames="DeclaredMethodNames"
		public Assignment getDeclaredMethodNamesAssignment_13() { return cDeclaredMethodNamesAssignment_13; }

		//"DeclaredMethodNames"
		public Keyword getDeclaredMethodNamesDeclaredMethodNamesKeyword_13_0() { return cDeclaredMethodNamesDeclaredMethodNamesKeyword_13_0; }

		//DeclaredFieldNames="DeclaredFieldNames"
		public Assignment getDeclaredFieldNamesAssignment_14() { return cDeclaredFieldNamesAssignment_14; }

		//"DeclaredFieldNames"
		public Keyword getDeclaredFieldNamesDeclaredFieldNamesKeyword_14_0() { return cDeclaredFieldNamesDeclaredFieldNamesKeyword_14_0; }

		//DeclaredFieldTypes="DeclaredFieldTypes"
		public Assignment getDeclaredFieldTypesAssignment_15() { return cDeclaredFieldTypesAssignment_15; }

		//"DeclaredFieldTypes"
		public Keyword getDeclaredFieldTypesDeclaredFieldTypesKeyword_15_0() { return cDeclaredFieldTypesDeclaredFieldTypesKeyword_15_0; }

		//AllDeclaredFieldNames="AllDeclaredFieldNames"
		public Assignment getAllDeclaredFieldNamesAssignment_16() { return cAllDeclaredFieldNamesAssignment_16; }

		//"AllDeclaredFieldNames"
		public Keyword getAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_16_0() { return cAllDeclaredFieldNamesAllDeclaredFieldNamesKeyword_16_0; }

		//FullText="FullText"
		public Assignment getFullTextAssignment_17() { return cFullTextAssignment_17; }

		//"FullText"
		public Keyword getFullTextFullTextKeyword_17_0() { return cFullTextFullTextKeyword_17_0; }

		//FieldsRead="FieldsRead"
		public Assignment getFieldsReadAssignment_18() { return cFieldsReadAssignment_18; }

		//"FieldsRead"
		public Keyword getFieldsReadFieldsReadKeyword_18_0() { return cFieldsReadFieldsReadKeyword_18_0; }

		//FieldsWritten="FieldsWritten"
		public Assignment getFieldsWrittenAssignment_19() { return cFieldsWrittenAssignment_19; }

		//"FieldsWritten"
		public Keyword getFieldsWrittenFieldsWrittenKeyword_19_0() { return cFieldsWrittenFieldsWrittenKeyword_19_0; }

		//UsedFieldsInFinally="UsedFieldsInFinally"
		public Assignment getUsedFieldsInFinallyAssignment_20() { return cUsedFieldsInFinallyAssignment_20; }

		//"UsedFieldsInFinally"
		public Keyword getUsedFieldsInFinallyUsedFieldsInFinallyKeyword_20_0() { return cUsedFieldsInFinallyUsedFieldsInFinallyKeyword_20_0; }

		//UsedFieldsInTry="UsedFieldsInTry"
		public Assignment getUsedFieldsInTryAssignment_21() { return cUsedFieldsInTryAssignment_21; }

		//"UsedFieldsInTry"
		public Keyword getUsedFieldsInTryUsedFieldsInTryKeyword_21_0() { return cUsedFieldsInTryUsedFieldsInTryKeyword_21_0; }

		//Annotations="Annotations"
		public Assignment getAnnotationsAssignment_22() { return cAnnotationsAssignment_22; }

		//"Annotations"
		public Keyword getAnnotationsAnnotationsKeyword_22_0() { return cAnnotationsAnnotationsKeyword_22_0; }

		//Timestamp="Timestamp"
		public Assignment getTimestampAssignment_23() { return cTimestampAssignment_23; }

		//"Timestamp"
		public Keyword getTimestampTimestampKeyword_23_0() { return cTimestampTimestampKeyword_23_0; }
	}

	public class TypeFieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeFieldName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTypeTypeKeyword_0_0 = (Keyword)cTypeAssignment_0.eContents().get(0);
		private final Assignment cImplementedTypesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cImplementedTypesImplementedTypesKeyword_1_0 = (Keyword)cImplementedTypesAssignment_1.eContents().get(0);
		private final Assignment cExtendedTypesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cExtendedTypesExtendedTypesKeyword_2_0 = (Keyword)cExtendedTypesAssignment_2.eContents().get(0);
		private final Assignment cUsedTypesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cUsedTypesUsedTypesKeyword_3_0 = (Keyword)cUsedTypesAssignment_3.eContents().get(0);
		private final Assignment cUsedTypesInTryAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cUsedTypesInTryUsedTypesInTryKeyword_4_0 = (Keyword)cUsedTypesInTryAssignment_4.eContents().get(0);
		private final Assignment cUsedTypesInFinallyAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cUsedTypesInFinallyUsedTypesInFinallyKeyword_5_0 = (Keyword)cUsedTypesInFinallyAssignment_5.eContents().get(0);
		private final Assignment cParameterTypesAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cParameterTypesParameterTypesKeyword_6_0 = (Keyword)cParameterTypesAssignment_6.eContents().get(0);
		private final Assignment cReturnTypeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final Keyword cReturnTypeReturnTypeKeyword_7_0 = (Keyword)cReturnTypeAssignment_7.eContents().get(0);
		private final Assignment cAllImplementedTypesAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cAllImplementedTypesAllImplementedTypesKeyword_8_0 = (Keyword)cAllImplementedTypesAssignment_8.eContents().get(0);
		private final Assignment cAllExtendedTypesAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cAllExtendedTypesAllExtendedTypesKeyword_9_0 = (Keyword)cAllExtendedTypesAssignment_9.eContents().get(0);
		private final Assignment cFieldTypeAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cFieldTypeFieldTypeKeyword_10_0 = (Keyword)cFieldTypeAssignment_10.eContents().get(0);
		private final Assignment cDeclaringTypeAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cDeclaringTypeDeclaringTypeKeyword_11_0 = (Keyword)cDeclaringTypeAssignment_11.eContents().get(0);
		private final Assignment cCaughtTypeAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cCaughtTypeCaughtTypeKeyword_12_0 = (Keyword)cCaughtTypeAssignment_12.eContents().get(0);
		private final Assignment cInstanceofTypesAssignment_13 = (Assignment)cAlternatives.eContents().get(13);
		private final Keyword cInstanceofTypesInstanceofTypesKeyword_13_0 = (Keyword)cInstanceofTypesAssignment_13.eContents().get(0);
		
		/// *
		//
		//	End of generated rules.
		//
		// * / TypeFieldName:
		//	Type="Type" | ImplementedTypes="ImplementedTypes" | ExtendedTypes="ExtendedTypes" | UsedTypes="UsedTypes" |
		//	UsedTypesInTry="UsedTypesInTry" | UsedTypesInFinally="UsedTypesInFinally" | ParameterTypes="ParameterTypes" |
		//	ReturnType="ReturnType" | AllImplementedTypes="AllImplementedTypes" | AllExtendedTypes="AllExtendedTypes" |
		//	FieldType="FieldType" | DeclaringType="DeclaringType" | CaughtType="CaughtType" | InstanceofTypes="InstanceofTypes";
		public ParserRule getRule() { return rule; }

		//Type="Type" | ImplementedTypes="ImplementedTypes" | ExtendedTypes="ExtendedTypes" | UsedTypes="UsedTypes" |
		//UsedTypesInTry="UsedTypesInTry" | UsedTypesInFinally="UsedTypesInFinally" | ParameterTypes="ParameterTypes" |
		//ReturnType="ReturnType" | AllImplementedTypes="AllImplementedTypes" | AllExtendedTypes="AllExtendedTypes" |
		//FieldType="FieldType" | DeclaringType="DeclaringType" | CaughtType="CaughtType" | InstanceofTypes="InstanceofTypes"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type="Type"
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"Type"
		public Keyword getTypeTypeKeyword_0_0() { return cTypeTypeKeyword_0_0; }

		//ImplementedTypes="ImplementedTypes"
		public Assignment getImplementedTypesAssignment_1() { return cImplementedTypesAssignment_1; }

		//"ImplementedTypes"
		public Keyword getImplementedTypesImplementedTypesKeyword_1_0() { return cImplementedTypesImplementedTypesKeyword_1_0; }

		//ExtendedTypes="ExtendedTypes"
		public Assignment getExtendedTypesAssignment_2() { return cExtendedTypesAssignment_2; }

		//"ExtendedTypes"
		public Keyword getExtendedTypesExtendedTypesKeyword_2_0() { return cExtendedTypesExtendedTypesKeyword_2_0; }

		//UsedTypes="UsedTypes"
		public Assignment getUsedTypesAssignment_3() { return cUsedTypesAssignment_3; }

		//"UsedTypes"
		public Keyword getUsedTypesUsedTypesKeyword_3_0() { return cUsedTypesUsedTypesKeyword_3_0; }

		//UsedTypesInTry="UsedTypesInTry"
		public Assignment getUsedTypesInTryAssignment_4() { return cUsedTypesInTryAssignment_4; }

		//"UsedTypesInTry"
		public Keyword getUsedTypesInTryUsedTypesInTryKeyword_4_0() { return cUsedTypesInTryUsedTypesInTryKeyword_4_0; }

		//UsedTypesInFinally="UsedTypesInFinally"
		public Assignment getUsedTypesInFinallyAssignment_5() { return cUsedTypesInFinallyAssignment_5; }

		//"UsedTypesInFinally"
		public Keyword getUsedTypesInFinallyUsedTypesInFinallyKeyword_5_0() { return cUsedTypesInFinallyUsedTypesInFinallyKeyword_5_0; }

		//ParameterTypes="ParameterTypes"
		public Assignment getParameterTypesAssignment_6() { return cParameterTypesAssignment_6; }

		//"ParameterTypes"
		public Keyword getParameterTypesParameterTypesKeyword_6_0() { return cParameterTypesParameterTypesKeyword_6_0; }

		//ReturnType="ReturnType"
		public Assignment getReturnTypeAssignment_7() { return cReturnTypeAssignment_7; }

		//"ReturnType"
		public Keyword getReturnTypeReturnTypeKeyword_7_0() { return cReturnTypeReturnTypeKeyword_7_0; }

		//AllImplementedTypes="AllImplementedTypes"
		public Assignment getAllImplementedTypesAssignment_8() { return cAllImplementedTypesAssignment_8; }

		//"AllImplementedTypes"
		public Keyword getAllImplementedTypesAllImplementedTypesKeyword_8_0() { return cAllImplementedTypesAllImplementedTypesKeyword_8_0; }

		//AllExtendedTypes="AllExtendedTypes"
		public Assignment getAllExtendedTypesAssignment_9() { return cAllExtendedTypesAssignment_9; }

		//"AllExtendedTypes"
		public Keyword getAllExtendedTypesAllExtendedTypesKeyword_9_0() { return cAllExtendedTypesAllExtendedTypesKeyword_9_0; }

		//FieldType="FieldType"
		public Assignment getFieldTypeAssignment_10() { return cFieldTypeAssignment_10; }

		//"FieldType"
		public Keyword getFieldTypeFieldTypeKeyword_10_0() { return cFieldTypeFieldTypeKeyword_10_0; }

		//DeclaringType="DeclaringType"
		public Assignment getDeclaringTypeAssignment_11() { return cDeclaringTypeAssignment_11; }

		//"DeclaringType"
		public Keyword getDeclaringTypeDeclaringTypeKeyword_11_0() { return cDeclaringTypeDeclaringTypeKeyword_11_0; }

		//CaughtType="CaughtType"
		public Assignment getCaughtTypeAssignment_12() { return cCaughtTypeAssignment_12; }

		//"CaughtType"
		public Keyword getCaughtTypeCaughtTypeKeyword_12_0() { return cCaughtTypeCaughtTypeKeyword_12_0; }

		//InstanceofTypes="InstanceofTypes"
		public Assignment getInstanceofTypesAssignment_13() { return cInstanceofTypesAssignment_13; }

		//"InstanceofTypes"
		public Keyword getInstanceofTypesInstanceofTypesKeyword_13_0() { return cInstanceofTypesInstanceofTypesKeyword_13_0; }
	}
	
	
	public class BooleanExpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnd1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnd1ANDKeyword_0_0 = (Keyword)cAnd1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAnd2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAnd2AndKeyword_1_0 = (Keyword)cAnd2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOr1EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOr1ORKeyword_2_0 = (Keyword)cOr1EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOr2EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOr2OrKeyword_3_0 = (Keyword)cOr2EnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BooleanExp:
		//	and1="AND" | and2="and" | or1="OR" | or2="or";
		public EnumRule getRule() { return rule; }

		//and1="AND" | and2="and" | or1="OR" | or2="or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and1="AND"
		public EnumLiteralDeclaration getAnd1EnumLiteralDeclaration_0() { return cAnd1EnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getAnd1ANDKeyword_0_0() { return cAnd1ANDKeyword_0_0; }

		//and2="and"
		public EnumLiteralDeclaration getAnd2EnumLiteralDeclaration_1() { return cAnd2EnumLiteralDeclaration_1; }

		//"and"
		public Keyword getAnd2AndKeyword_1_0() { return cAnd2AndKeyword_1_0; }

		//or1="OR"
		public EnumLiteralDeclaration getOr1EnumLiteralDeclaration_2() { return cOr1EnumLiteralDeclaration_2; }

		//"OR"
		public Keyword getOr1ORKeyword_2_0() { return cOr1ORKeyword_2_0; }

		//or2="or"
		public EnumLiteralDeclaration getOr2EnumLiteralDeclaration_3() { return cOr2EnumLiteralDeclaration_3; }

		//"or"
		public Keyword getOr2OrKeyword_3_0() { return cOr2OrKeyword_3_0; }
	}

	public class NotExpressionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NotExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNot1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNot1NotKeyword_0_0 = (Keyword)cNot1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNot2EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNot2NOTKeyword_1_0 = (Keyword)cNot2EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNot3EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNot3ExclamationMarkKeyword_2_0 = (Keyword)cNot3EnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NotExpression:
		//	not1="not" | not2="NOT" | not3="!";
		public EnumRule getRule() { return rule; }

		//not1="not" | not2="NOT" | not3="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//not1="not"
		public EnumLiteralDeclaration getNot1EnumLiteralDeclaration_0() { return cNot1EnumLiteralDeclaration_0; }

		//"not"
		public Keyword getNot1NotKeyword_0_0() { return cNot1NotKeyword_0_0; }

		//not2="NOT"
		public EnumLiteralDeclaration getNot2EnumLiteralDeclaration_1() { return cNot2EnumLiteralDeclaration_1; }

		//"NOT"
		public Keyword getNot2NOTKeyword_1_0() { return cNot2NOTKeyword_1_0; }

		//not3="!"
		public EnumLiteralDeclaration getNot3EnumLiteralDeclaration_2() { return cNot3EnumLiteralDeclaration_2; }

		//"!"
		public Keyword getNot3ExclamationMarkKeyword_2_0() { return cNot3ExclamationMarkKeyword_2_0; }
	}
	
	private Exp1Elements pExp1;
	private Exp2Elements pExp2;
	private ClauseExpressionElements pClauseExpression;
	private SimpleClauseElements pSimpleClause;
	private TypeClauseElements pTypeClause;
	private FieldValueElements pFieldValue;
	private TypeTestElements pTypeTest;
	private ValueElements pValue;
	private BooleanExpElements unknownRuleBooleanExp;
	private NotExpressionElements unknownRuleNotExpression;
	private FieldNameElements pFieldName;
	private TypeFieldNameElements pTypeFieldName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public LuceneQueryGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// * * 
	//
	// *   Query  ::= ( Clause )*
	//
	// *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
	//
	// * 	
	//
	// * 
	//
	// * Example: FriendlyName:(+"toString" -"toUpperCase") AND ReturnType:"Ljava/lang/String"
	//
	// * * / Exp1 returns Expression:
	//	Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*;
	public Exp1Elements getExp1Access() {
		return (pExp1 != null) ? pExp1 : (pExp1 = new Exp1Elements());
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}

	//Exp2 returns Expression:
	//	value=ClauseExpression | "(" Exp1 ")";
	public Exp2Elements getExp2Access() {
		return (pExp2 != null) ? pExp2 : (pExp2 = new Exp2Elements());
	}
	
	public ParserRule getExp2Rule() {
		return getExp2Access().getRule();
	}

	////	Query returns Expression: 
	//
	////		{Query}
	//
	////		clauseExpressions+=ClauseExpression*
	//
	////	;
	//
	//ClauseExpression:
	//	clause=SimpleClause | clause=TypeClause;
	public ClauseExpressionElements getClauseExpressionAccess() {
		return (pClauseExpression != null) ? pClauseExpression : (pClauseExpression = new ClauseExpressionElements());
	}
	
	public ParserRule getClauseExpressionRule() {
		return getClauseExpressionAccess().getRule();
	}

	//SimpleClause:
	//	n=NotExpression? field=FieldName ":" value=FieldValue;
	public SimpleClauseElements getSimpleClauseAccess() {
		return (pSimpleClause != null) ? pSimpleClause : (pSimpleClause = new SimpleClauseElements());
	}
	
	public ParserRule getSimpleClauseRule() {
		return getSimpleClauseAccess().getRule();
	}

	//TypeClause:
	//	n=NotExpression? field=TypeFieldName ":" value=TypeTest;
	public TypeClauseElements getTypeClauseAccess() {
		return (pTypeClause != null) ? pTypeClause : (pTypeClause = new TypeClauseElements());
	}
	
	public ParserRule getTypeClauseRule() {
		return getTypeClauseAccess().getRule();
	}

	//FieldValue:
	//	Value | "(" Value* ")";
	public FieldValueElements getFieldValueAccess() {
		return (pFieldValue != null) ? pFieldValue : (pFieldValue = new FieldValueElements());
	}
	
	public ParserRule getFieldValueRule() {
		return getFieldValueAccess().getRule();
	}

	//TypeTest:
	//	test1="test1" | test2="test2";
	public TypeTestElements getTypeTestAccess() {
		return (pTypeTest != null) ? pTypeTest : (pTypeTest = new TypeTestElements());
	}
	
	public ParserRule getTypeTestRule() {
		return getTypeTestAccess().getRule();
	}

	//Value:
	//	("+" | "-")? (ID | STRING);
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//enum BooleanExp:
	//	and1="AND" | and2="and" | or1="OR" | or2="or";
	public BooleanExpElements getBooleanExpAccess() {
		return (unknownRuleBooleanExp != null) ? unknownRuleBooleanExp : (unknownRuleBooleanExp = new BooleanExpElements());
	}
	
	public EnumRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}

	//enum NotExpression:
	//	not1="not" | not2="NOT" | not3="!";
	public NotExpressionElements getNotExpressionAccess() {
		return (unknownRuleNotExpression != null) ? unknownRuleNotExpression : (unknownRuleNotExpression = new NotExpressionElements());
	}
	
	public EnumRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	/// *
	//
	//	The following rules are generated. Do not modify. Modify source file instead.
	//
	// * / FieldName:
	//	FullyQualifiedName="FullyQualifiedName" | FriendlyName="FriendlyName" | DeclaredMethods="DeclaredMethods" |
	//	ParameterCount="ParameterCount" | ReturnVariableEexpressions="ReturnVariableEexpressions" | UsedMethods="UsedMethods"
	//	| UsedMethodsInTry="UsedMethodsInTry" | UsedMethodsInFinally="UsedMethodsInFinally" |
	//	OverriddenMethods="OverriddenMethods" | ProjectName="ProjectName" | ResourcePath="ResourcePath" |
	//	Modifiers="Modifiers" | AllDeclaredMethodNames="AllDeclaredMethodNames" | DeclaredMethodNames="DeclaredMethodNames" |
	//	DeclaredFieldNames="DeclaredFieldNames" | DeclaredFieldTypes="DeclaredFieldTypes" |
	//	AllDeclaredFieldNames="AllDeclaredFieldNames" | FullText="FullText" | FieldsRead="FieldsRead" |
	//	FieldsWritten="FieldsWritten" | UsedFieldsInFinally="UsedFieldsInFinally" | UsedFieldsInTry="UsedFieldsInTry" |
	//	Annotations="Annotations" | Timestamp="Timestamp";
	public FieldNameElements getFieldNameAccess() {
		return (pFieldName != null) ? pFieldName : (pFieldName = new FieldNameElements());
	}
	
	public ParserRule getFieldNameRule() {
		return getFieldNameAccess().getRule();
	}

	/// *
	//
	//	End of generated rules.
	//
	// * / TypeFieldName:
	//	Type="Type" | ImplementedTypes="ImplementedTypes" | ExtendedTypes="ExtendedTypes" | UsedTypes="UsedTypes" |
	//	UsedTypesInTry="UsedTypesInTry" | UsedTypesInFinally="UsedTypesInFinally" | ParameterTypes="ParameterTypes" |
	//	ReturnType="ReturnType" | AllImplementedTypes="AllImplementedTypes" | AllExtendedTypes="AllExtendedTypes" |
	//	FieldType="FieldType" | DeclaringType="DeclaringType" | CaughtType="CaughtType" | InstanceofTypes="InstanceofTypes";
	public TypeFieldNameElements getTypeFieldNameAccess() {
		return (pTypeFieldName != null) ? pTypeFieldName : (pTypeFieldName = new TypeFieldNameElements());
	}
	
	public ParserRule getTypeFieldNameRule() {
		return getTypeFieldNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
