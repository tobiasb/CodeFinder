grammar org.eclipselabs.recommenders.codesearchquery.rcp.dsl.LuceneQuery 
	with org.eclipse.xtext.common.Terminals

generate luceneQuery 'http://www.eclipselabs.org/recommenders/codesearchquery/rcp/dsl/LuceneQuery'


/* * 
 *   Query  ::= ( Clause )*
 *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
 * 	
 * 
 * Example: FriendlyName:(+"toString" -"toUpperCase") AND ReturnType:"Ljava/lang/String"
 * */
 

	Exp1 returns Expression:
	 Exp2 ({Exp1.left=current} b=BooleanExp right=Exp2)*;
	
	Exp2 returns Expression:
	 value=ClauseExpression |
	 '(' Exp1 ')';

//	Query returns Expression: 
//		{Query}
//		clauseExpressions+=ClauseExpression*
//	;
	
	ClauseExpression:
		clause=SimpleClause | clause=TypeClause
	;
	
	SimpleClause:
		(n=NotExpression)? field=FieldName ':' value=FieldValue
	;
	
	TypeClause:
		(n=NotExpression)? field=TypeFieldName ':' value=TypeValue
	;
	
	FieldValue:
		Value | '(' Value* ')'
	;
	
	TypeValue:
		Value | '(' Value* ')'
	;
	
	Value:
		('+' | '-')? (ID | STRING | ANY_OTHER)
	;
	
	enum BooleanExp:
		and1='AND' | and2='and' | or1='OR' | or2='or'
	;

	enum NotExpression:
		not1='not' | not2='NOT' | not3='!'
	;
	
/*
	The following rules are generated. Do not modify. Modify source file instead.
*/
FieldName:
		FullyQualifiedName='FullyQualifiedName'
	| 	Type='Type'
	| 	FriendlyName='FriendlyName'
	| 	DeclaredMethods='DeclaredMethods'
	| 	ParameterCount='ParameterCount'
	| 	ReturnVariableEexpressions='ReturnVariableEexpressions'
	| 	UsedMethods='UsedMethods'
	| 	UsedMethodsInTry='UsedMethodsInTry'
	| 	UsedMethodsInFinally='UsedMethodsInFinally'
	| 	OverriddenMethods='OverriddenMethods'
	| 	ProjectName='ProjectName'
	| 	ResourcePath='ResourcePath'
	| 	Modifiers='Modifiers'
	| 	AllDeclaredMethodNames='AllDeclaredMethodNames'
	| 	DeclaredMethodNames='DeclaredMethodNames'
	| 	DeclaredFieldNames='DeclaredFieldNames'
	| 	DeclaredFieldTypes='DeclaredFieldTypes'
	| 	AllDeclaredFieldNames='AllDeclaredFieldNames'
	| 	FullText='FullText'
	| 	FieldsRead='FieldsRead'
	| 	FieldsWritten='FieldsWritten'
	| 	UsedFieldsInFinally='UsedFieldsInFinally'
	| 	UsedFieldsInTry='UsedFieldsInTry'
	| 	Annotations='Annotations'
	| 	Timestamp='Timestamp'
;
TypeFieldName:
		ImplementedTypes='ImplementedTypes'
	| 	ExtendedTypes='ExtendedTypes'
	| 	UsedTypes='UsedTypes'
	| 	UsedTypesInTry='UsedTypesInTry'
	| 	UsedTypesInFinally='UsedTypesInFinally'
	| 	ParameterTypes='ParameterTypes'
	| 	ReturnType='ReturnType'
	| 	AllImplementedTypes='AllImplementedTypes'
	| 	AllExtendedTypes='AllExtendedTypes'
	| 	FieldType='FieldType'
	| 	DeclaringType='DeclaringType'
	| 	CaughtType='CaughtType'
	| 	InstanceofTypes='InstanceofTypes'
;
/*
	End of generated rules.
*/