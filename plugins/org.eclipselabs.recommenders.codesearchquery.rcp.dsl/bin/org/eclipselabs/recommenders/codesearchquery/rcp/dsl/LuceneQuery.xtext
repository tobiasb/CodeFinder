grammar org.eclipselabs.recommenders.codesearchquery.rcp.dsl.LuceneQuery 
	with org.eclipse.xtext.common.Terminals//org.eclipse.xtext.xbase.Xtype

generate luceneQuery 'http://www.eclipselabs.org/recommenders/codesearchquery/rcp/dsl/LuceneQuery'


/* * 
 *   Query  ::= ( Clause )*
 *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
 * */
 
	Exp1 returns Expression:
	 Exp2 ( {Exp1.left=current} b=BinaryExp? right=Exp1 )?; // Right associativity. Why? See http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
	
	Exp2 returns Expression:
	 value=ClauseExpression | (UnaryExpression? '(' Exp1 ')' Boost?);
	 
/*
	The following rules are generated. Do not modify. Modify source file instead.
*/

	//Generated Rule. Do not modify!
	ClauseExpression:
		(UnaryExpression)? 
		(
			default=SimpleFieldValue Boost? | // Default field
			(
				(
					field=SimpleField ':' 
					(
						(values+=SimpleFieldValue)
						| ('('(UnaryExpression? values+=SimpleFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=TypeField ':' 
					(
						(values+=TypeFieldValue)
						| ('('(UnaryExpression? values+=TypeFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=MethodField ':' 
					(
						(values+=MethodFieldValue)
						| ('('(UnaryExpression? values+=MethodFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=FilePathField ':' 
					(
						(values+=FilePathFieldValue)
						| ('('(UnaryExpression? values+=FilePathFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=NumberField ':' 
					(
						(values+=NumberFieldValue)
						| ('('(UnaryExpression? values+=NumberFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=ModifierField ':' 
					(
						(values+=ModifierFieldValue)
						| ('('(UnaryExpression? values+=ModifierFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=TimeField ':' 
					(
						(values+=TimeFieldValue)
						| ('('(UnaryExpression? values+=TimeFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=DocumentTypeField ':' 
					(
						(values+=DocumentTypeFieldValue)
						| ('('(UnaryExpression? values+=DocumentTypeFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=ProjectNameField ':' 
					(
						(values+=ProjectNameFieldValue)
						| ('('(UnaryExpression? values+=ProjectNameFieldValue Boost?)*')')
					)  Boost?
				)
			| 	(
					field=AnnotationField ':' 
					(
						(values+=AnnotationFieldValue)
						| ('('(UnaryExpression? values+=AnnotationFieldValue Boost?)*')')
					)  Boost?
				)
			)
		)
	;

	//Generated Rule. Do not modify!
	SimpleField:
			FullyQualifiedName='FullyQualifiedName'
		| 	FriendlyName='FriendlyName'
		| 	DeclaredMethods='DeclaredMethods'
		| 	ReturnVariableEexpressions='ReturnVariableEexpressions'
		| 	AllDeclaredMethodNames='AllDeclaredMethodNames'
		| 	DeclaredMethodNames='DeclaredMethodNames'
		| 	DeclaredFieldNames='DeclaredFieldNames'
		| 	AllDeclaredFieldNames='AllDeclaredFieldNames'
		| 	FullText='FullText'
		| 	FieldsRead='FieldsRead'
		| 	FieldsWritten='FieldsWritten'
		| 	UsedFieldsInFinally='UsedFieldsInFinally'
		| 	UsedFieldsInTry='UsedFieldsInTry'
	;
	
	//Generated Rule. Do not modify!
	TypeField:
			ImplementedTypes='ImplementedTypes'
		| 	ExtendedTypes='ExtendedTypes'
		| 	UsedTypes='UsedTypes'
		| 	UsedTypesInTry='UsedTypesInTry'
		| 	UsedTypesInFinally='UsedTypesInFinally'
		| 	ParameterTypes='ParameterTypes'
		| 	ReturnType='ReturnType'
		| 	InstanceofTypes='InstanceofTypes'
		| 	AllImplementedTypes='AllImplementedTypes'
		| 	AllExtendedTypes='AllExtendedTypes'
		| 	FieldType='FieldType'
		| 	CaughtType='CaughtType'
		| 	DeclaredFieldTypes='DeclaredFieldTypes'
		| 	DeclaringType='DeclaringType'
	;
	
	//Generated Rule. Do not modify!
	MethodField:
			UsedMethods='UsedMethods'
		| 	UsedMethodsInTry='UsedMethodsInTry'
		| 	UsedMethodsInFinally='UsedMethodsInFinally'
		| 	OverriddenMethods='OverriddenMethods'
	;
	
	//Generated Rule. Do not modify!
	FilePathField:
			ResourcePath='ResourcePath'
	;
	
	//Generated Rule. Do not modify!
	NumberField:
			ParameterCount='ParameterCount'
	;
	
	//Generated Rule. Do not modify!
	ModifierField:
			Modifiers='Modifiers'
	;
	
	//Generated Rule. Do not modify!
	TimeField:
			Timestamp='Timestamp'
	;
	
	//Generated Rule. Do not modify!
	DocumentTypeField:
			Type='Type'
	;
	
	//Generated Rule. Do not modify!
	ProjectNameField:
			ProjectName='ProjectName'
	;
	
	//Generated Rule. Do not modify!
	AnnotationField:
			Annotations='Annotations'
	;
	
	/*
	End of generated rules.
	*/
	

	SimpleFieldValue:
		NameWithWC
	;
	
	MethodFieldValue:
		NameWithWC
	;
	
	ProjectNameFieldValue:
		NameWithWC
	;
	
	NumberFieldValue:
		INT
	;
	
	ModifierFieldValue:
		'private'
		| 'public' 
		| 'static' 
		| 'final'
		| 'abstract' 
		| 'protected'
	;
	
	TimeFieldValue:
		NameWithWC
	;
	
	DocumentTypeFieldValue:
		'class'
		| 'method'
		| 'field'
		| 'trycatch'
	;
	
	AnnotationFieldValue:
		NameWithWC
	;
	
	TypeFieldValue:
		NameWithWC
	;
	
	enum BinaryExp:
		and1='AND' | or1='OR' | or2='||'
	;

	UnaryExpression:
		('-' | 'NOT' | '!' | '+')
	;
	
	terminal Boost:
		'^' ('0'..'9')+ ('.' ('0'..'9')+)? 
	;
	
	terminal NameWithWC		: ('a'..'z'|'A'..'Z'|'_'|'*'|'?'|'<'|'>'|'['|']') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'<'|'>'|'['|']'|'.')*;
	terminal PathWithWC  	: (('A'..'Z' ':') | ('a'..'z'|'A'..'Z'|'_'|'/')) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'.'|'/')*;
	
	FilePathFieldValue:
		PathWithWC
	;
	//-----------------

