/*
 * generated by Xtext
 */
package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.ui.contentassist;

import java.util.List;

import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipselabs.recommenders.codesearch.rcp.dslQL2.qL2.Var;

import com.google.common.collect.Lists;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class QL2ProposalProvider extends AbstractQL2ProposalProvider {

    @Override
    public void complete_VarDef(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {
        // TODO Auto-generated method stub
        super.complete_VarDef(model, ruleCall, context, acceptor);
    }

    @Override
    public void complete_VarName(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        for (String varName : getVarNames(model)) {
            acceptor.accept(createCompletionProposal(varName, context));
        }
    }

    public List<String> getVarNames(EObject model) {
        List<String> result = Lists.newArrayList();

        if (model == null)
            return result;

        TreeIterator<EObject> iter = model.eAllContents();

        if (!iter.hasNext())
            return result;

        do {
            final EObject o = iter.next();

            if (o instanceof Var) {
                result.add(((Var) o).getName());
            }

        } while (iter.hasNext());

        return result;
    }
}
