/*
* generated by Xtext
*/
grammar InternalQL2;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.recommenders.codesearch.rcp.dslQL2.services.QL2GrammarAccess;

}

@parser::members {
 
 	private QL2GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(QL2GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarInitialisation
entryRuleVarInitialisation 
:
{ before(grammarAccess.getVarInitialisationRule()); }
	 ruleVarInitialisation
{ after(grammarAccess.getVarInitialisationRule()); } 
	 EOF 
;

// Rule VarInitialisation
ruleVarInitialisation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarInitialisationAccess().getGroup()); }
(rule__VarInitialisation__Group__0)
{ after(grammarAccess.getVarInitialisationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarNullLiteral
entryRuleVarNullLiteral 
:
{ before(grammarAccess.getVarNullLiteralRule()); }
	 ruleVarNullLiteral
{ after(grammarAccess.getVarNullLiteralRule()); } 
	 EOF 
;

// Rule VarNullLiteral
ruleVarNullLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarNullLiteralAccess().getGroup()); }
(rule__VarNullLiteral__Group__0)
{ after(grammarAccess.getVarNullLiteralAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration 
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
(rule__VarDeclaration__Group__0)
{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclarationParam
entryRuleVarDeclarationParam 
:
{ before(grammarAccess.getVarDeclarationParamRule()); }
	 ruleVarDeclarationParam
{ after(grammarAccess.getVarDeclarationParamRule()); } 
	 EOF 
;

// Rule VarDeclarationParam
ruleVarDeclarationParam
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclarationParamAccess().getGroup()); }
(rule__VarDeclarationParam__Group__0)
{ after(grammarAccess.getVarDeclarationParamAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodCall
entryRuleMethodCall 
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodCallAccess().getGroup()); }
(rule__MethodCall__Group__0)
{ after(grammarAccess.getMethodCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticMethodCall
entryRuleStaticMethodCall 
:
{ before(grammarAccess.getStaticMethodCallRule()); }
	 ruleStaticMethodCall
{ after(grammarAccess.getStaticMethodCallRule()); } 
	 EOF 
;

// Rule StaticMethodCall
ruleStaticMethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticMethodCallAccess().getGroup()); }
(rule__StaticMethodCall__Group__0)
{ after(grammarAccess.getStaticMethodCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWildcardName
entryRuleWildcardName 
:
{ before(grammarAccess.getWildcardNameRule()); }
	 ruleWildcardName
{ after(grammarAccess.getWildcardNameRule()); } 
	 EOF 
;

// Rule WildcardName
ruleWildcardName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getWildcardNameAccess().getAlternatives()); }
(rule__WildcardName__Alternatives)
{ after(grammarAccess.getWildcardNameAccess().getAlternatives()); }
)
(
{ before(grammarAccess.getWildcardNameAccess().getAlternatives()); }
(rule__WildcardName__Alternatives)*
{ after(grammarAccess.getWildcardNameAccess().getAlternatives()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticMethodName
entryRuleStaticMethodName 
:
{ before(grammarAccess.getStaticMethodNameRule()); }
	 ruleStaticMethodName
{ after(grammarAccess.getStaticMethodNameRule()); } 
	 EOF 
;

// Rule StaticMethodName
ruleStaticMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticMethodNameAccess().getGroup()); }
(rule__StaticMethodName__Group__0)
{ after(grammarAccess.getStaticMethodNameAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_1()); }
(rule__Statement__Group_1__0)
{ after(grammarAccess.getStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_2()); }
(rule__Statement__Group_2__0)
{ after(grammarAccess.getStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVarInitialisationParserRuleCall_0_1_0()); }
	ruleVarInitialisation
{ after(grammarAccess.getStatementAccess().getVarInitialisationParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getVarNullLiteralParserRuleCall_0_1_1()); }
	ruleVarNullLiteral
{ after(grammarAccess.getStatementAccess().getVarNullLiteralParserRuleCall_0_1_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_1_2()); }
	ruleVarDeclaration
{ after(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WildcardName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWildcardNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getWildcardNameAccess().getIDTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getWildcardNameAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getWildcardNameAccess().getAsteriskKeyword_1()); }
)

    |(
{ before(grammarAccess.getWildcardNameAccess().getQuestionMarkKeyword_2()); }

	'?' 

{ after(grammarAccess.getWildcardNameAccess().getQuestionMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModelAction_0()); }
(

)
{ after(grammarAccess.getModelAccess().getModelAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)?
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_2()); }
(rule__Model__Group_2__0)?
{ after(grammarAccess.getModelAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getModelAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
	rule__Model__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVarsAssignment_1_1()); }
(rule__Model__VarsAssignment_1_1)
{ after(grammarAccess.getModelAccess().getVarsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__2__Impl
	rule__Model__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1_2()); }
(rule__Model__Group_1_2__0)*
{ after(grammarAccess.getModelAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getModelAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Model__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_2__0__Impl
	rule__Model__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getModelAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVarsAssignment_1_2_1()); }
(rule__Model__VarsAssignment_1_2_1)
{ after(grammarAccess.getModelAccess().getVarsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Model__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2__0__Impl
	rule__Model__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2_0()); }

	'{' 

{ after(grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2__1__Impl
	rule__Model__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsAssignment_2_1()); }
(rule__Model__StatementsAssignment_2_1)*
{ after(grammarAccess.getModelAccess().getStatementsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_2_2()); }

	'}' 

{ after(grammarAccess.getModelAccess().getRightCurlyBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVarKeyword_0_0()); }

	'var' 

{ after(grammarAccess.getStatementAccess().getVarKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0_1()); }
(rule__Statement__Alternatives_0_1)
{ after(grammarAccess.getStatementAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCallKeyword_1_0()); }

	'call' 

{ after(grammarAccess.getStatementAccess().getCallKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_1_1()); }
	ruleMethodCall
{ after(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_2__0__Impl
	rule__Statement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getScallKeyword_2_0()); }

	'scall' 

{ after(grammarAccess.getStatementAccess().getScallKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStaticMethodCallParserRuleCall_2_1()); }
	ruleStaticMethodCall
{ after(grammarAccess.getStatementAccess().getStaticMethodCallParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarInitialisation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInitialisation__Group__0__Impl
	rule__VarInitialisation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getTypeAssignment_0()); }
(rule__VarInitialisation__TypeAssignment_0)
{ after(grammarAccess.getVarInitialisationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInitialisation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInitialisation__Group__1__Impl
	rule__VarInitialisation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getNameAssignment_1()); }
(rule__VarInitialisation__NameAssignment_1)
{ after(grammarAccess.getVarInitialisationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInitialisation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInitialisation__Group__2__Impl
	rule__VarInitialisation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getVarInitialisationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarInitialisation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarInitialisation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getAsteriskKeyword_3()); }

	'*' 

{ after(grammarAccess.getVarInitialisationAccess().getAsteriskKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VarNullLiteral__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarNullLiteral__Group__0__Impl
	rule__VarNullLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getTypeAssignment_0()); }
(rule__VarNullLiteral__TypeAssignment_0)
{ after(grammarAccess.getVarNullLiteralAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarNullLiteral__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarNullLiteral__Group__1__Impl
	rule__VarNullLiteral__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getNameAssignment_1()); }
(rule__VarNullLiteral__NameAssignment_1)
{ after(grammarAccess.getVarNullLiteralAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarNullLiteral__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarNullLiteral__Group__2__Impl
	rule__VarNullLiteral__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getVarNullLiteralAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarNullLiteral__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarNullLiteral__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getNullKeyword_3()); }

	'null' 

{ after(grammarAccess.getVarNullLiteralAccess().getNullKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__VarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
(rule__VarDeclaration__TypeAssignment_0)
{ after(grammarAccess.getVarDeclarationAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
(rule__VarDeclaration__NameAssignment_1)
{ after(grammarAccess.getVarDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VarDeclarationParam__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclarationParam__Group__0__Impl
	rule__VarDeclarationParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationParam__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationParamAccess().getTypeAssignment_0()); }
(rule__VarDeclarationParam__TypeAssignment_0)
{ after(grammarAccess.getVarDeclarationParamAccess().getTypeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclarationParam__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDeclarationParam__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationParam__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationParamAccess().getNameAssignment_1()); }
(rule__VarDeclarationParam__NameAssignment_1)
{ after(grammarAccess.getVarDeclarationParamAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameCalleeAssignment_0()); }
(rule__MethodCall__NameCalleeAssignment_0)
{ after(grammarAccess.getMethodCallAccess().getNameCalleeAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__1__Impl
	rule__MethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getMethodCallAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__2__Impl
	rule__MethodCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getMethodAssignment_2()); }
(rule__MethodCall__MethodAssignment_2)
{ after(grammarAccess.getMethodCallAccess().getMethodAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__3__Impl
	rule__MethodCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__4__Impl
	rule__MethodCall__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameCallerAssignment_4()); }
(rule__MethodCall__NameCallerAssignment_4)?
{ after(grammarAccess.getMethodCallAccess().getNameCallerAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__StaticMethodCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodCall__Group__0__Impl
	rule__StaticMethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getMethodAssignment_0()); }
(rule__StaticMethodCall__MethodAssignment_0)
{ after(grammarAccess.getStaticMethodCallAccess().getMethodAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticMethodCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodCall__Group__1__Impl
	rule__StaticMethodCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getStaticMethodCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticMethodCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodCall__Group__2__Impl
	rule__StaticMethodCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getNameAssignment_2()); }
(rule__StaticMethodCall__NameAssignment_2)
{ after(grammarAccess.getStaticMethodCallAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticMethodCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getStaticMethodCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__StaticMethodName__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodName__Group__0__Impl
	rule__StaticMethodName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodName__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodNameAccess().getWildcardNameParserRuleCall_0()); }
	ruleWildcardName
{ after(grammarAccess.getStaticMethodNameAccess().getWildcardNameParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticMethodName__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodName__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getStaticMethodNameAccess().getGroup_1()); }
(rule__StaticMethodName__Group_1__0)
{ after(grammarAccess.getStaticMethodNameAccess().getGroup_1()); }
)
(
{ before(grammarAccess.getStaticMethodNameAccess().getGroup_1()); }
(rule__StaticMethodName__Group_1__0)*
{ after(grammarAccess.getStaticMethodNameAccess().getGroup_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StaticMethodName__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodName__Group_1__0__Impl
	rule__StaticMethodName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodName__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodNameAccess().getFullStopKeyword_1_0()); }

	'.' 

{ after(grammarAccess.getStaticMethodNameAccess().getFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticMethodName__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticMethodName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodName__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodNameAccess().getWildcardNameParserRuleCall_1_1()); }
	ruleWildcardName
{ after(grammarAccess.getStaticMethodNameAccess().getWildcardNameParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__VarsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_1_0()); }
	ruleVarDeclarationParam{ after(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VarsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_2_1_0()); }
	ruleVarDeclarationParam{ after(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StatementsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_2_1_0()); }
	ruleStatement{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getTypeWildcardNameParserRuleCall_0_0()); }
	ruleWildcardName{ after(grammarAccess.getVarInitialisationAccess().getTypeWildcardNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarInitialisation__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarInitialisationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarInitialisationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getTypeWildcardNameParserRuleCall_0_0()); }
	ruleWildcardName{ after(grammarAccess.getVarNullLiteralAccess().getTypeWildcardNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarNullLiteral__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarNullLiteralAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarNullLiteralAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getTypeWildcardNameParserRuleCall_0_0()); }
	ruleWildcardName{ after(grammarAccess.getVarDeclarationAccess().getTypeWildcardNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationParam__TypeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationParamAccess().getTypeWildcardNameParserRuleCall_0_0()); }
	ruleWildcardName{ after(grammarAccess.getVarDeclarationParamAccess().getTypeWildcardNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationParam__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationParamAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclarationParamAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__NameCalleeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameCalleeIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMethodCallAccess().getNameCalleeIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getMethodWildcardNameParserRuleCall_2_0()); }
	ruleWildcardName{ after(grammarAccess.getMethodCallAccess().getMethodWildcardNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__NameCallerAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getNameCallerIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getMethodCallAccess().getNameCallerIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__MethodAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getMethodStaticMethodNameParserRuleCall_0_0()); }
	ruleStaticMethodName{ after(grammarAccess.getStaticMethodCallAccess().getMethodStaticMethodNameParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StaticMethodCall__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticMethodCallAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getStaticMethodCallAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


