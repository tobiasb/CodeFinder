/**
 * Copyright (c) 2012 Tobias Boehm.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Tobias Boehm - initial API and implementation.
 */

/*
 * generated by Xtext
 */
package org.eclipselabs.recommenders.codesearch.rcp.dsl.ui.contentassist;

import java.util.HashMap;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.collect.Maps;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class LuceneQueryProposalProvider extends AbstractLuceneQueryProposalProvider {

    private static HashMap<QueryProposalType, IQueryProposalProvider> provider = Maps.newHashMap();

    public static void addQueryProposalProvider(QueryProposalType type, IQueryProposalProvider provider) {
        LuceneQueryProposalProvider.provider.put(type, provider);
    }

    @Override
    public void complete_TypeFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.TYPE, context, acceptor);
    }

    @Override
    public void complete_FilePathFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.FILE_PATH, context, acceptor);
    }

    @Override
    public void complete_ModifierFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.MODIFIER, context, acceptor);
    }

    @Override
    public void complete_DocumentTypeFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.DOCUMENT_TYPE, context, acceptor);
    }

    @Override
    public void complete_ProjectNameFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.PROJECT_NAME, context, acceptor);
    }

    @Override
    public void complete_MethodFieldValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.METHOD, context, acceptor);
    }

    @Override
    public void complete_DefinitionTypeValue(EObject model, RuleCall ruleCall, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        fillProposals(QueryProposalType.DEFINITION, context, acceptor);
    }

    private void fillProposals(QueryProposalType proposalType, ContentAssistContext context,
            ICompletionProposalAcceptor acceptor) {

        ProposalProviderHelper.fillProposals(proposalType, context, acceptor, this, provider);
    }
}
