/*
* generated by Xtext
*/

package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QL1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MethodPatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodPattern");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionMethodPatternDefinitionParserRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		//MethodPattern:
		//	definition=MethodPatternDefinition;
		public ParserRule getRule() { return rule; }

		//definition=MethodPatternDefinition
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }

		//MethodPatternDefinition
		public RuleCall getDefinitionMethodPatternDefinitionParserRuleCall_0() { return cDefinitionMethodPatternDefinitionParserRuleCall_0; }
	}

	public class MethodPatternDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodPatternDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierDefinitionModifierDefinitionParserRuleCall_0_0 = (RuleCall)cModifierDefinitionAssignment_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReturnTypeReturnTypeParserRuleCall_1_0 = (RuleCall)cReturnTypeAssignment_1.eContents().get(0);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameMethodNameParserRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		private final Assignment cParameterDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParameterDefinitionParameterDefinitionParserRuleCall_3_0 = (RuleCall)cParameterDefinitionAssignment_3.eContents().get(0);
		private final Assignment cThrowsClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThrowsClauseThrowsParserRuleCall_4_0 = (RuleCall)cThrowsClauseAssignment_4.eContents().get(0);
		
		//MethodPatternDefinition:
		//	modifierDefinition=ModifierDefinition returnType=ReturnType methodName=MethodName
		//	parameterDefinition=ParameterDefinition? throwsClause=Throws?;
		public ParserRule getRule() { return rule; }

		//modifierDefinition=ModifierDefinition returnType=ReturnType methodName=MethodName
		//parameterDefinition=ParameterDefinition? throwsClause=Throws?
		public Group getGroup() { return cGroup; }

		//modifierDefinition=ModifierDefinition
		public Assignment getModifierDefinitionAssignment_0() { return cModifierDefinitionAssignment_0; }

		//ModifierDefinition
		public RuleCall getModifierDefinitionModifierDefinitionParserRuleCall_0_0() { return cModifierDefinitionModifierDefinitionParserRuleCall_0_0; }

		//returnType=ReturnType
		public Assignment getReturnTypeAssignment_1() { return cReturnTypeAssignment_1; }

		//ReturnType
		public RuleCall getReturnTypeReturnTypeParserRuleCall_1_0() { return cReturnTypeReturnTypeParserRuleCall_1_0; }

		//methodName=MethodName
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }

		//MethodName
		public RuleCall getMethodNameMethodNameParserRuleCall_2_0() { return cMethodNameMethodNameParserRuleCall_2_0; }

		//parameterDefinition=ParameterDefinition?
		public Assignment getParameterDefinitionAssignment_3() { return cParameterDefinitionAssignment_3; }

		//ParameterDefinition
		public RuleCall getParameterDefinitionParameterDefinitionParserRuleCall_3_0() { return cParameterDefinitionParameterDefinitionParserRuleCall_3_0; }

		//throwsClause=Throws?
		public Assignment getThrowsClauseAssignment_4() { return cThrowsClauseAssignment_4; }

		//Throws
		public RuleCall getThrowsClauseThrowsParserRuleCall_4_0() { return cThrowsClauseThrowsParserRuleCall_4_0; }
	}

	public class ParameterDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParameterElementholderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParameterElementholderParameterElementHolderParserRuleCall_1_0 = (RuleCall)cParameterElementholderAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParameterElementholderAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParameterElementholderParameterElementHolderParserRuleCall_2_1_0 = (RuleCall)cParameterElementholderAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterDefinition:
		//	"(" parameterElementholder+=ParameterElementHolder ("," parameterElementholder+=ParameterElementHolder)* ")";
		public ParserRule getRule() { return rule; }

		//"(" parameterElementholder+=ParameterElementHolder ("," parameterElementholder+=ParameterElementHolder)* ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//parameterElementholder+=ParameterElementHolder
		public Assignment getParameterElementholderAssignment_1() { return cParameterElementholderAssignment_1; }

		//ParameterElementHolder
		public RuleCall getParameterElementholderParameterElementHolderParserRuleCall_1_0() { return cParameterElementholderParameterElementHolderParserRuleCall_1_0; }

		//("," parameterElementholder+=ParameterElementHolder)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//parameterElementholder+=ParameterElementHolder
		public Assignment getParameterElementholderAssignment_2_1() { return cParameterElementholderAssignment_2_1; }

		//ParameterElementHolder
		public RuleCall getParameterElementholderParameterElementHolderParserRuleCall_2_1_0() { return cParameterElementholderParameterElementHolderParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModifierDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModifierDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		
		//ModifierDefinition:
		//	{ModifierDefinition} modifiers+=Modifier*;
		public ParserRule getRule() { return rule; }

		//{ModifierDefinition} modifiers+=Modifier*
		public Group getGroup() { return cGroup; }

		//{ModifierDefinition}
		public Action getModifierDefinitionAction_0() { return cModifierDefinitionAction_0; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_1_0() { return cModifiersModifierParserRuleCall_1_0; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueStaticKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValuePrivateKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cValuePublicKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cValueFinalKeyword_3_0 = (Keyword)cValueAssignment_3.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cValueAbstractKeyword_4_0 = (Keyword)cValueAssignment_4.eContents().get(0);
		private final Assignment cValueAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cValueProtectedKeyword_5_0 = (Keyword)cValueAssignment_5.eContents().get(0);
		
		//Modifier:
		//	value="static" | value="private" | value="public" | value="final" | value="abstract" | value="protected";
		public ParserRule getRule() { return rule; }

		//value="static" | value="private" | value="public" | value="final" | value="abstract" | value="protected"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="static"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"static"
		public Keyword getValueStaticKeyword_0_0() { return cValueStaticKeyword_0_0; }

		//value="private"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"private"
		public Keyword getValuePrivateKeyword_1_0() { return cValuePrivateKeyword_1_0; }

		//value="public"
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//"public"
		public Keyword getValuePublicKeyword_2_0() { return cValuePublicKeyword_2_0; }

		//value="final"
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//"final"
		public Keyword getValueFinalKeyword_3_0() { return cValueFinalKeyword_3_0; }

		//value="abstract"
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//"abstract"
		public Keyword getValueAbstractKeyword_4_0() { return cValueAbstractKeyword_4_0; }

		//value="protected"
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//"protected"
		public Keyword getValueProtectedKeyword_5_0() { return cValueProtectedKeyword_5_0; }
	}

	public class ReturnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnType");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueTypeFieldValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//ReturnType:
		//	value=TypeFieldValue;
		public ParserRule getRule() { return rule; }

		//value=TypeFieldValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//TypeFieldValue
		public RuleCall getValueTypeFieldValueParserRuleCall_0() { return cValueTypeFieldValueParserRuleCall_0; }
	}

	public class ParameterElementHolderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterElementHolder");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementSingleElementParserRuleCall_0_0 = (RuleCall)cElementAssignment_0.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementMultiElementParserRuleCall_1_0 = (RuleCall)cElementAssignment_1.eContents().get(0);
		
		//ParameterElementHolder:
		//	element=SingleElement | element=MultiElement;
		public ParserRule getRule() { return rule; }

		//element=SingleElement | element=MultiElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//element=SingleElement
		public Assignment getElementAssignment_0() { return cElementAssignment_0; }

		//SingleElement
		public RuleCall getElementSingleElementParserRuleCall_0_0() { return cElementSingleElementParserRuleCall_0_0; }

		//element=MultiElement
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }

		//MultiElement
		public RuleCall getElementMultiElementParserRuleCall_1_0() { return cElementMultiElementParserRuleCall_1_0; }
	}

	public class SingleElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleElement");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueParameterTypeParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SingleElement:
		//	value=ParameterType;
		public ParserRule getRule() { return rule; }

		//value=ParameterType
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ParameterType
		public RuleCall getValueParameterTypeParserRuleCall_0() { return cValueParameterTypeParserRuleCall_0; }
	}

	public class MultiElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsSingleElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElementsSingleElementParserRuleCall_2_1_0 = (RuleCall)cElementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MultiElement:
		//	"{" elements+=SingleElement ("|" elements+=SingleElement)* "}";
		public ParserRule getRule() { return rule; }

		//"{" elements+=SingleElement ("|" elements+=SingleElement)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=SingleElement
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//SingleElement
		public RuleCall getElementsSingleElementParserRuleCall_1_0() { return cElementsSingleElementParserRuleCall_1_0; }

		//("|" elements+=SingleElement)*
		public Group getGroup_2() { return cGroup_2; }

		//"|"
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }

		//elements+=SingleElement
		public Assignment getElementsAssignment_2_1() { return cElementsAssignment_2_1; }

		//SingleElement
		public RuleCall getElementsSingleElementParserRuleCall_2_1_0() { return cElementsSingleElementParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueTypeFieldValueParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFullStopFullStopKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		
		//ParameterType:
		//	value=TypeFieldValue | value="..";
		public ParserRule getRule() { return rule; }

		//value=TypeFieldValue | value=".."
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=TypeFieldValue
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//TypeFieldValue
		public RuleCall getValueTypeFieldValueParserRuleCall_0_0() { return cValueTypeFieldValueParserRuleCall_0_0; }

		//value=".."
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//".."
		public Keyword getValueFullStopFullStopKeyword_1_0() { return cValueFullStopFullStopKeyword_1_0; }
	}

	public class ThrowsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Throws");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueTypeFieldValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Throws:
		//	"throws" value=TypeFieldValue;
		public ParserRule getRule() { return rule; }

		//"throws" value=TypeFieldValue
		public Group getGroup() { return cGroup; }

		//"throws"
		public Keyword getThrowsKeyword_0() { return cThrowsKeyword_0; }

		//value=TypeFieldValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//TypeFieldValue
		public RuleCall getValueTypeFieldValueParserRuleCall_1_0() { return cValueTypeFieldValueParserRuleCall_1_0; }
	}

	public class MethodNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodName");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSimpleFieldValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MethodName:
		//	value=SimpleFieldValue;
		public ParserRule getRule() { return rule; }

		//value=SimpleFieldValue
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SimpleFieldValue
		public RuleCall getValueSimpleFieldValueParserRuleCall_0() { return cValueSimpleFieldValueParserRuleCall_0; }
	}

	public class SimpleFieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleFieldValue");
		private final RuleCall cNameWithWCTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SimpleFieldValue:
		//	NameWithWC;
		public ParserRule getRule() { return rule; }

		//NameWithWC
		public RuleCall getNameWithWCTerminalRuleCall() { return cNameWithWCTerminalRuleCall; }
	}

	public class TypeFieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeFieldValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cVoidKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cNameWithWCTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeFieldValue:
		//	"void" | NameWithWC;
		public ParserRule getRule() { return rule; }

		//"void" | NameWithWC
		public Alternatives getAlternatives() { return cAlternatives; }

		//"void"
		public Keyword getVoidKeyword_0() { return cVoidKeyword_0; }

		//NameWithWC
		public RuleCall getNameWithWCTerminalRuleCall_1() { return cNameWithWCTerminalRuleCall_1; }
	}
	
	
	private MethodPatternElements pMethodPattern;
	private MethodPatternDefinitionElements pMethodPatternDefinition;
	private ParameterDefinitionElements pParameterDefinition;
	private ModifierDefinitionElements pModifierDefinition;
	private ModifierElements pModifier;
	private ReturnTypeElements pReturnType;
	private ParameterElementHolderElements pParameterElementHolder;
	private SingleElementElements pSingleElement;
	private MultiElementElements pMultiElement;
	private ParameterTypeElements pParameterType;
	private ThrowsElements pThrows;
	private MethodNameElements pMethodName;
	private SimpleFieldValueElements pSimpleFieldValue;
	private TypeFieldValueElements pTypeFieldValue;
	private TerminalRule tNameWithWC;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QL1GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MethodPattern:
	//	definition=MethodPatternDefinition;
	public MethodPatternElements getMethodPatternAccess() {
		return (pMethodPattern != null) ? pMethodPattern : (pMethodPattern = new MethodPatternElements());
	}
	
	public ParserRule getMethodPatternRule() {
		return getMethodPatternAccess().getRule();
	}

	//MethodPatternDefinition:
	//	modifierDefinition=ModifierDefinition returnType=ReturnType methodName=MethodName
	//	parameterDefinition=ParameterDefinition? throwsClause=Throws?;
	public MethodPatternDefinitionElements getMethodPatternDefinitionAccess() {
		return (pMethodPatternDefinition != null) ? pMethodPatternDefinition : (pMethodPatternDefinition = new MethodPatternDefinitionElements());
	}
	
	public ParserRule getMethodPatternDefinitionRule() {
		return getMethodPatternDefinitionAccess().getRule();
	}

	//ParameterDefinition:
	//	"(" parameterElementholder+=ParameterElementHolder ("," parameterElementholder+=ParameterElementHolder)* ")";
	public ParameterDefinitionElements getParameterDefinitionAccess() {
		return (pParameterDefinition != null) ? pParameterDefinition : (pParameterDefinition = new ParameterDefinitionElements());
	}
	
	public ParserRule getParameterDefinitionRule() {
		return getParameterDefinitionAccess().getRule();
	}

	//ModifierDefinition:
	//	{ModifierDefinition} modifiers+=Modifier*;
	public ModifierDefinitionElements getModifierDefinitionAccess() {
		return (pModifierDefinition != null) ? pModifierDefinition : (pModifierDefinition = new ModifierDefinitionElements());
	}
	
	public ParserRule getModifierDefinitionRule() {
		return getModifierDefinitionAccess().getRule();
	}

	//Modifier:
	//	value="static" | value="private" | value="public" | value="final" | value="abstract" | value="protected";
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//ReturnType:
	//	value=TypeFieldValue;
	public ReturnTypeElements getReturnTypeAccess() {
		return (pReturnType != null) ? pReturnType : (pReturnType = new ReturnTypeElements());
	}
	
	public ParserRule getReturnTypeRule() {
		return getReturnTypeAccess().getRule();
	}

	//ParameterElementHolder:
	//	element=SingleElement | element=MultiElement;
	public ParameterElementHolderElements getParameterElementHolderAccess() {
		return (pParameterElementHolder != null) ? pParameterElementHolder : (pParameterElementHolder = new ParameterElementHolderElements());
	}
	
	public ParserRule getParameterElementHolderRule() {
		return getParameterElementHolderAccess().getRule();
	}

	//SingleElement:
	//	value=ParameterType;
	public SingleElementElements getSingleElementAccess() {
		return (pSingleElement != null) ? pSingleElement : (pSingleElement = new SingleElementElements());
	}
	
	public ParserRule getSingleElementRule() {
		return getSingleElementAccess().getRule();
	}

	//MultiElement:
	//	"{" elements+=SingleElement ("|" elements+=SingleElement)* "}";
	public MultiElementElements getMultiElementAccess() {
		return (pMultiElement != null) ? pMultiElement : (pMultiElement = new MultiElementElements());
	}
	
	public ParserRule getMultiElementRule() {
		return getMultiElementAccess().getRule();
	}

	//ParameterType:
	//	value=TypeFieldValue | value="..";
	public ParameterTypeElements getParameterTypeAccess() {
		return (pParameterType != null) ? pParameterType : (pParameterType = new ParameterTypeElements());
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}

	//Throws:
	//	"throws" value=TypeFieldValue;
	public ThrowsElements getThrowsAccess() {
		return (pThrows != null) ? pThrows : (pThrows = new ThrowsElements());
	}
	
	public ParserRule getThrowsRule() {
		return getThrowsAccess().getRule();
	}

	//MethodName:
	//	value=SimpleFieldValue;
	public MethodNameElements getMethodNameAccess() {
		return (pMethodName != null) ? pMethodName : (pMethodName = new MethodNameElements());
	}
	
	public ParserRule getMethodNameRule() {
		return getMethodNameAccess().getRule();
	}

	//SimpleFieldValue:
	//	NameWithWC;
	public SimpleFieldValueElements getSimpleFieldValueAccess() {
		return (pSimpleFieldValue != null) ? pSimpleFieldValue : (pSimpleFieldValue = new SimpleFieldValueElements());
	}
	
	public ParserRule getSimpleFieldValueRule() {
		return getSimpleFieldValueAccess().getRule();
	}

	//TypeFieldValue:
	//	"void" | NameWithWC;
	public TypeFieldValueElements getTypeFieldValueAccess() {
		return (pTypeFieldValue != null) ? pTypeFieldValue : (pTypeFieldValue = new TypeFieldValueElements());
	}
	
	public ParserRule getTypeFieldValueRule() {
		return getTypeFieldValueAccess().getRule();
	}

	//terminal NameWithWC:
	//	("a".."z" | "A".."Z" | "_" | "*" | "?") ("a".."z" | "A".."Z" | "_" | "0".."9" | "*" | "?" | "." | "/")*;
	public TerminalRule getNameWithWCRule() {
		return (tNameWithWC != null) ? tNameWithWC : (tNameWithWC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NameWithWC"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
