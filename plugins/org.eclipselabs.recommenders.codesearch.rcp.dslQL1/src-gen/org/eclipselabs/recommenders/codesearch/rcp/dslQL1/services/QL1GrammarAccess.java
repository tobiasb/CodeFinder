/*
* generated by Xtext
*/

package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QL1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class FirstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "First");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEOrExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cContainingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cCAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cCContainsParserRuleCall_3_2_0 = (RuleCall)cCAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cAndKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_4_1 = (Keyword)cGroup_3_4.eContents().get(1);
		private final Assignment cCAssignment_3_4_2 = (Assignment)cGroup_3_4.eContents().get(2);
		private final RuleCall cCContainsParserRuleCall_3_4_2_0 = (RuleCall)cCAssignment_3_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4_3 = (Keyword)cGroup_3_4.eContents().get(3);
		
		//First:
		//	type=Type "where" e=OrExpr ("Containing" "(" c+=Contains ")" ("and" "(" c+=Contains ")")*)?;
		public ParserRule getRule() { return rule; }

		//type=Type "where" e=OrExpr ("Containing" "(" c+=Contains ")" ("and" "(" c+=Contains ")")*)?
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//"where"
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }

		//e=OrExpr
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//OrExpr
		public RuleCall getEOrExprParserRuleCall_2_0() { return cEOrExprParserRuleCall_2_0; }

		//("Containing" "(" c+=Contains ")" ("and" "(" c+=Contains ")")*)?
		public Group getGroup_3() { return cGroup_3; }

		//"Containing"
		public Keyword getContainingKeyword_3_0() { return cContainingKeyword_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//c+=Contains
		public Assignment getCAssignment_3_2() { return cCAssignment_3_2; }

		//Contains
		public RuleCall getCContainsParserRuleCall_3_2_0() { return cCContainsParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//("and" "(" c+=Contains ")")*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"and"
		public Keyword getAndKeyword_3_4_0() { return cAndKeyword_3_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_4_1() { return cLeftParenthesisKeyword_3_4_1; }

		//c+=Contains
		public Assignment getCAssignment_3_4_2() { return cCAssignment_3_4_2; }

		//Contains
		public RuleCall getCContainsParserRuleCall_3_4_2_0() { return cCContainsParserRuleCall_3_4_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4_3() { return cRightParenthesisKeyword_3_4_3; }
	}

	public class ContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cWhereKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEOrExprParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		
		//Contains:
		//	type=Type "where" e=OrExpr;
		public ParserRule getRule() { return rule; }

		//type=Type "where" e=OrExpr
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//"where"
		public Keyword getWhereKeyword_1() { return cWhereKeyword_1; }

		//e=OrExpr
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//OrExpr
		public RuleCall getEOrExprParserRuleCall_2_0() { return cEOrExprParserRuleCall_2_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExprLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExpr returns Expression:
		//	AndExpr ({OrExpr.left=current} "or" right=AndExpr)*;
		public ParserRule getRule() { return rule; }

		//AndExpr ({OrExpr.left=current} "or" right=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//({OrExpr.left=current} "or" right=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpr.left=current}
		public Action getOrExprLeftAction_1_0() { return cOrExprLeftAction_1_0; }

		//"or"
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }

		//right=AndExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpr
		public RuleCall getRightAndExprParserRuleCall_1_2_0() { return cRightAndExprParserRuleCall_1_2_0; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpr returns Expression:
		//	Primary ({Multiplication.left=current} "and" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({Multiplication.left=current} "and" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({Multiplication.left=current} "and" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }

		//"and"
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary returns Expression:
		//	FieldExpr | "(" OrExpr ")";
		public ParserRule getRule() { return rule; }

		//FieldExpr | "(" OrExpr ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FieldExpr
		public RuleCall getFieldExprParserRuleCall_0() { return cFieldExprParserRuleCall_0; }

		//"(" OrExpr ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall_1_1() { return cOrExprParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class FieldExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSingleValueFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiValueFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanFieldParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FieldExpr:
		//	SingleValueField | MultiValueField | BooleanField;
		public ParserRule getRule() { return rule; }

		//SingleValueField | MultiValueField | BooleanField
		public Alternatives getAlternatives() { return cAlternatives; }

		//SingleValueField
		public RuleCall getSingleValueFieldParserRuleCall_0() { return cSingleValueFieldParserRuleCall_0; }

		//MultiValueField
		public RuleCall getMultiValueFieldParserRuleCall_1() { return cMultiValueFieldParserRuleCall_1; }

		//BooleanField
		public RuleCall getBooleanFieldParserRuleCall_2() { return cBooleanFieldParserRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueMethodsKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cMethodAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMethodTypesKeyword_1_0 = (Keyword)cMethodAssignment_1.eContents().get(0);
		
		//Type:
		//	value="Methods" | method="Types";
		public ParserRule getRule() { return rule; }

		//value="Methods" | method="Types"
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="Methods"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"Methods"
		public Keyword getValueMethodsKeyword_0_0() { return cValueMethodsKeyword_0_0; }

		//method="Types"
		public Assignment getMethodAssignment_1() { return cMethodAssignment_1; }

		//"Types"
		public Keyword getMethodTypesKeyword_1_0() { return cMethodTypesKeyword_1_0; }
	}

	public class SingleValueFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleValueField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSingleValueFieldNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNNegationParserRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueNameWithWCTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SingleValueField:
		//	name=SingleValueFieldName n=Negation? "is" value=NameWithWC;
		public ParserRule getRule() { return rule; }

		//name=SingleValueFieldName n=Negation? "is" value=NameWithWC
		public Group getGroup() { return cGroup; }

		//name=SingleValueFieldName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//SingleValueFieldName
		public RuleCall getNameSingleValueFieldNameParserRuleCall_0_0() { return cNameSingleValueFieldNameParserRuleCall_0_0; }

		//n=Negation?
		public Assignment getNAssignment_1() { return cNAssignment_1; }

		//Negation
		public RuleCall getNNegationParserRuleCall_1_0() { return cNNegationParserRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//value=NameWithWC
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//NameWithWC
		public RuleCall getValueNameWithWCTerminalRuleCall_3_0() { return cValueNameWithWCTerminalRuleCall_3_0; }
	}

	public class MultiValueFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiValueField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMultiValueFieldNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cHasKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValuesNameWithWCTerminalRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesNameWithWCTerminalRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cValuesNameWithWCTerminalRuleCall_2_1_2_1_0 = (RuleCall)cValuesAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		
		//MultiValueField:
		//	name=MultiValueFieldName "has" (values+=NameWithWC | "(" values+=NameWithWC ("," values+=NameWithWC)* ")");
		public ParserRule getRule() { return rule; }

		//name=MultiValueFieldName "has" (values+=NameWithWC | "(" values+=NameWithWC ("," values+=NameWithWC)* ")")
		public Group getGroup() { return cGroup; }

		//name=MultiValueFieldName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//MultiValueFieldName
		public RuleCall getNameMultiValueFieldNameParserRuleCall_0_0() { return cNameMultiValueFieldNameParserRuleCall_0_0; }

		//"has"
		public Keyword getHasKeyword_1() { return cHasKeyword_1; }

		//values+=NameWithWC | "(" values+=NameWithWC ("," values+=NameWithWC)* ")"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//values+=NameWithWC
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//NameWithWC
		public RuleCall getValuesNameWithWCTerminalRuleCall_2_0_0() { return cValuesNameWithWCTerminalRuleCall_2_0_0; }

		//"(" values+=NameWithWC ("," values+=NameWithWC)* ")"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//values+=NameWithWC
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//NameWithWC
		public RuleCall getValuesNameWithWCTerminalRuleCall_2_1_1_0() { return cValuesNameWithWCTerminalRuleCall_2_1_1_0; }

		//("," values+=NameWithWC)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//values+=NameWithWC
		public Assignment getValuesAssignment_2_1_2_1() { return cValuesAssignment_2_1_2_1; }

		//NameWithWC
		public RuleCall getValuesNameWithWCTerminalRuleCall_2_1_2_1_0() { return cValuesNameWithWCTerminalRuleCall_2_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_1_3() { return cRightParenthesisKeyword_2_1_3; }
	}

	public class BooleanFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNNegationParserRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueIsStaticKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cValueIsPrivateKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cValueIsPublicKeyword_1_2_0 = (Keyword)cValueAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cValueIsFinalKeyword_1_3_0 = (Keyword)cValueAssignment_1_3.eContents().get(0);
		private final Assignment cValueAssignment_1_4 = (Assignment)cAlternatives_1.eContents().get(4);
		private final Keyword cValueIsAbstractKeyword_1_4_0 = (Keyword)cValueAssignment_1_4.eContents().get(0);
		private final Assignment cValueAssignment_1_5 = (Assignment)cAlternatives_1.eContents().get(5);
		private final Keyword cValueIsProtectedKeyword_1_5_0 = (Keyword)cValueAssignment_1_5.eContents().get(0);
		
		//BooleanField:
		//	n=Negation? (value="IsStatic" | value="IsPrivate" | value="IsPublic" | value="IsFinal" | value="IsAbstract" |
		//	value="IsProtected");
		public ParserRule getRule() { return rule; }

		//n=Negation? (value="IsStatic" | value="IsPrivate" | value="IsPublic" | value="IsFinal" | value="IsAbstract" |
		//value="IsProtected")
		public Group getGroup() { return cGroup; }

		//n=Negation?
		public Assignment getNAssignment_0() { return cNAssignment_0; }

		//Negation
		public RuleCall getNNegationParserRuleCall_0_0() { return cNNegationParserRuleCall_0_0; }

		//value="IsStatic" | value="IsPrivate" | value="IsPublic" | value="IsFinal" | value="IsAbstract" | value="IsProtected"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value="IsStatic"
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"IsStatic"
		public Keyword getValueIsStaticKeyword_1_0_0() { return cValueIsStaticKeyword_1_0_0; }

		//value="IsPrivate"
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//"IsPrivate"
		public Keyword getValueIsPrivateKeyword_1_1_0() { return cValueIsPrivateKeyword_1_1_0; }

		//value="IsPublic"
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//"IsPublic"
		public Keyword getValueIsPublicKeyword_1_2_0() { return cValueIsPublicKeyword_1_2_0; }

		//value="IsFinal"
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//"IsFinal"
		public Keyword getValueIsFinalKeyword_1_3_0() { return cValueIsFinalKeyword_1_3_0; }

		//value="IsAbstract"
		public Assignment getValueAssignment_1_4() { return cValueAssignment_1_4; }

		//"IsAbstract"
		public Keyword getValueIsAbstractKeyword_1_4_0() { return cValueIsAbstractKeyword_1_4_0; }

		//value="IsProtected"
		public Assignment getValueAssignment_1_5() { return cValueAssignment_1_5; }

		//"IsProtected"
		public Keyword getValueIsProtectedKeyword_1_5_0() { return cValueIsProtectedKeyword_1_5_0; }
	}

	public class SingleValueFieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleValueFieldName");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNameKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//SingleValueFieldName:
		//	value="Name";
		public ParserRule getRule() { return rule; }

		//value="Name"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"Name"
		public Keyword getValueNameKeyword_0() { return cValueNameKeyword_0; }
	}

	public class MultiValueFieldNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiValueFieldName");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueCalledMethodsKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//MultiValueFieldName:
		//	value="CalledMethods";
		public ParserRule getRule() { return rule; }

		//value="CalledMethods"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"CalledMethods"
		public Keyword getValueCalledMethodsKeyword_0() { return cValueCalledMethodsKeyword_0; }
	}

	public class NegationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Negation");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueExclamationMarkKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//Negation:
		//	value="!";
		public ParserRule getRule() { return rule; }

		//value="!"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"!"
		public Keyword getValueExclamationMarkKeyword_0() { return cValueExclamationMarkKeyword_0; }
	}
	
	
	public class BinaryExpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAnd1EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAnd1ANDKeyword_0_0 = (Keyword)cAnd1EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOr1EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOr1ORKeyword_1_0 = (Keyword)cOr1EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cOr2EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cOr2VerticalLineVerticalLineKeyword_2_0 = (Keyword)cOr2EnumLiteralDeclaration_2.eContents().get(0);
		
		//enum BinaryExp:
		//	and1="AND" | or1="OR" | or2="||";
		public EnumRule getRule() { return rule; }

		//and1="AND" | or1="OR" | or2="||"
		public Alternatives getAlternatives() { return cAlternatives; }

		//and1="AND"
		public EnumLiteralDeclaration getAnd1EnumLiteralDeclaration_0() { return cAnd1EnumLiteralDeclaration_0; }

		//"AND"
		public Keyword getAnd1ANDKeyword_0_0() { return cAnd1ANDKeyword_0_0; }

		//or1="OR"
		public EnumLiteralDeclaration getOr1EnumLiteralDeclaration_1() { return cOr1EnumLiteralDeclaration_1; }

		//"OR"
		public Keyword getOr1ORKeyword_1_0() { return cOr1ORKeyword_1_0; }

		//or2="||"
		public EnumLiteralDeclaration getOr2EnumLiteralDeclaration_2() { return cOr2EnumLiteralDeclaration_2; }

		//"||"
		public Keyword getOr2VerticalLineVerticalLineKeyword_2_0() { return cOr2VerticalLineVerticalLineKeyword_2_0; }
	}
	
	private FirstElements pFirst;
	private ContainsElements pContains;
	private OrExprElements pOrExpr;
	private AndExprElements pAndExpr;
	private PrimaryElements pPrimary;
	private FieldExprElements pFieldExpr;
	private TypeElements pType;
	private SingleValueFieldElements pSingleValueField;
	private MultiValueFieldElements pMultiValueField;
	private BooleanFieldElements pBooleanField;
	private SingleValueFieldNameElements pSingleValueFieldName;
	private MultiValueFieldNameElements pMultiValueFieldName;
	private NegationElements pNegation;
	private BinaryExpElements unknownRuleBinaryExp;
	private TerminalRule tNameWithWC;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QL1GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//First:
	//	type=Type "where" e=OrExpr ("Containing" "(" c+=Contains ")" ("and" "(" c+=Contains ")")*)?;
	public FirstElements getFirstAccess() {
		return (pFirst != null) ? pFirst : (pFirst = new FirstElements());
	}
	
	public ParserRule getFirstRule() {
		return getFirstAccess().getRule();
	}

	//Contains:
	//	type=Type "where" e=OrExpr;
	public ContainsElements getContainsAccess() {
		return (pContains != null) ? pContains : (pContains = new ContainsElements());
	}
	
	public ParserRule getContainsRule() {
		return getContainsAccess().getRule();
	}

	//OrExpr returns Expression:
	//	AndExpr ({OrExpr.left=current} "or" right=AndExpr)*;
	public OrExprElements getOrExprAccess() {
		return (pOrExpr != null) ? pOrExpr : (pOrExpr = new OrExprElements());
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//AndExpr returns Expression:
	//	Primary ({Multiplication.left=current} "and" right=Primary)*;
	public AndExprElements getAndExprAccess() {
		return (pAndExpr != null) ? pAndExpr : (pAndExpr = new AndExprElements());
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//Primary returns Expression:
	//	FieldExpr | "(" OrExpr ")";
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//FieldExpr:
	//	SingleValueField | MultiValueField | BooleanField;
	public FieldExprElements getFieldExprAccess() {
		return (pFieldExpr != null) ? pFieldExpr : (pFieldExpr = new FieldExprElements());
	}
	
	public ParserRule getFieldExprRule() {
		return getFieldExprAccess().getRule();
	}

	//Type:
	//	value="Methods" | method="Types";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//SingleValueField:
	//	name=SingleValueFieldName n=Negation? "is" value=NameWithWC;
	public SingleValueFieldElements getSingleValueFieldAccess() {
		return (pSingleValueField != null) ? pSingleValueField : (pSingleValueField = new SingleValueFieldElements());
	}
	
	public ParserRule getSingleValueFieldRule() {
		return getSingleValueFieldAccess().getRule();
	}

	//MultiValueField:
	//	name=MultiValueFieldName "has" (values+=NameWithWC | "(" values+=NameWithWC ("," values+=NameWithWC)* ")");
	public MultiValueFieldElements getMultiValueFieldAccess() {
		return (pMultiValueField != null) ? pMultiValueField : (pMultiValueField = new MultiValueFieldElements());
	}
	
	public ParserRule getMultiValueFieldRule() {
		return getMultiValueFieldAccess().getRule();
	}

	//BooleanField:
	//	n=Negation? (value="IsStatic" | value="IsPrivate" | value="IsPublic" | value="IsFinal" | value="IsAbstract" |
	//	value="IsProtected");
	public BooleanFieldElements getBooleanFieldAccess() {
		return (pBooleanField != null) ? pBooleanField : (pBooleanField = new BooleanFieldElements());
	}
	
	public ParserRule getBooleanFieldRule() {
		return getBooleanFieldAccess().getRule();
	}

	//SingleValueFieldName:
	//	value="Name";
	public SingleValueFieldNameElements getSingleValueFieldNameAccess() {
		return (pSingleValueFieldName != null) ? pSingleValueFieldName : (pSingleValueFieldName = new SingleValueFieldNameElements());
	}
	
	public ParserRule getSingleValueFieldNameRule() {
		return getSingleValueFieldNameAccess().getRule();
	}

	//MultiValueFieldName:
	//	value="CalledMethods";
	public MultiValueFieldNameElements getMultiValueFieldNameAccess() {
		return (pMultiValueFieldName != null) ? pMultiValueFieldName : (pMultiValueFieldName = new MultiValueFieldNameElements());
	}
	
	public ParserRule getMultiValueFieldNameRule() {
		return getMultiValueFieldNameAccess().getRule();
	}

	//Negation:
	//	value="!";
	public NegationElements getNegationAccess() {
		return (pNegation != null) ? pNegation : (pNegation = new NegationElements());
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//enum BinaryExp:
	//	and1="AND" | or1="OR" | or2="||";
	public BinaryExpElements getBinaryExpAccess() {
		return (unknownRuleBinaryExp != null) ? unknownRuleBinaryExp : (unknownRuleBinaryExp = new BinaryExpElements());
	}
	
	public EnumRule getBinaryExpRule() {
		return getBinaryExpAccess().getRule();
	}

	//terminal NameWithWC:
	//	("a".."z" | "A".."Z" | "_" | "*" | "?" | "<" | ">" | "[" | "]") ("a".."z" | "A".."Z" | "_" | "0".."9" | "*" | "?" |
	//	"<" | ">" | "[" | "]" | ".")*;
	public TerminalRule getNameWithWCRule() {
		return (tNameWithWC != null) ? tNameWithWC : (tNameWithWC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NameWithWC"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
