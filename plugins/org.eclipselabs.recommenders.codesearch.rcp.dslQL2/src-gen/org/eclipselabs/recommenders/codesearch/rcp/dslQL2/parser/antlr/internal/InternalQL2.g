/*
* generated by Xtext
*/
grammar InternalQL2;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipselabs.recommenders.codesearch.rcp.dslQL2.services.QL2GrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private QL2GrammarAccess grammarAccess;
 	
    public InternalQL2Parser(TokenStream input, QL2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected QL2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getModelAction_0(),
            $current);
    }
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_1_0()); 
	    }
		lv_vars_2_0=ruleVarDeclarationParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_2_0, 
        		"VarDeclarationParam");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModelAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getVarsVarDeclarationParamParserRuleCall_1_2_1_0()); 
	    }
		lv_vars_4_0=ruleVarDeclarationParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_4_0, 
        		"VarDeclarationParam");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightParenthesisKeyword_1_3());
    }
)?(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getLeftCurlyBracketKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_2_1_0()); 
	    }
		lv_statements_7_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_7_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_2_2());
    }
)?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getVarKeyword_0_0());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVarInitialisationParserRuleCall_0_1_0()); 
    }
    this_VarInitialisation_1=ruleVarInitialisation
    { 
        $current = $this_VarInitialisation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVarNullLiteralParserRuleCall_0_1_1()); 
    }
    this_VarNullLiteral_2=ruleVarNullLiteral
    { 
        $current = $this_VarNullLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getVarDeclarationParserRuleCall_0_1_2()); 
    }
    this_VarDeclaration_3=ruleVarDeclaration
    { 
        $current = $this_VarDeclaration_3.current; 
        afterParserOrEnumRuleCall();
    }
))
    |(	otherlv_4='call' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getCallKeyword_1_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getMethodCallParserRuleCall_1_1()); 
    }
    this_MethodCall_5=ruleMethodCall
    { 
        $current = $this_MethodCall_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='scall' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getScallKeyword_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getStaticMethodCallParserRuleCall_2_1()); 
    }
    this_StaticMethodCall_7=ruleStaticMethodCall
    { 
        $current = $this_StaticMethodCall_7.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleVarInitialisation
entryRuleVarInitialisation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarInitialisationRule()); }
	 iv_ruleVarInitialisation=ruleVarInitialisation 
	 { $current=$iv_ruleVarInitialisation.current; } 
	 EOF 
;

// Rule VarInitialisation
ruleVarInitialisation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarInitialisationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarInitialisationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVarInitialisationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarInitialisationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarInitialisationAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarInitialisationAccess().getAsteriskKeyword_3());
    }
)
;





// Entry rule entryRuleVarNullLiteral
entryRuleVarNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarNullLiteralRule()); }
	 iv_ruleVarNullLiteral=ruleVarNullLiteral 
	 { $current=$iv_ruleVarNullLiteral.current; } 
	 EOF 
;

// Rule VarNullLiteral
ruleVarNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarNullLiteralAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarNullLiteralRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVarNullLiteralAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarNullLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVarNullLiteralAccess().getEqualsSignKeyword_2());
    }
	otherlv_3='null' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarNullLiteralAccess().getNullKeyword_3());
    }
)
;





// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	 iv_ruleVarDeclaration=ruleVarDeclaration 
	 { $current=$iv_ruleVarDeclaration.current; } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleVarDeclarationParam
entryRuleVarDeclarationParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclarationParamRule()); }
	 iv_ruleVarDeclarationParam=ruleVarDeclarationParam 
	 { $current=$iv_ruleVarDeclarationParam.current; } 
	 EOF 
;

// Rule VarDeclarationParam
ruleVarDeclarationParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclarationParamAccess().getTypeTypeParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclarationParamRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVarDeclarationParamAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclarationParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	 iv_ruleMethodCall=ruleMethodCall 
	 { $current=$iv_ruleMethodCall.current; } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getNameCalleeNameParserRuleCall_0_0()); 
	    }
		lv_nameCallee_0_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"nameCallee",
        		lv_nameCallee_0_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getMethodCalledMethodNameParserRuleCall_2_0()); 
	    }
		lv_method_2_0=ruleCalledMethodName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_2_0, 
        		"CalledMethodName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getNameCallerNameParserRuleCall_4_0()); 
	    }
		lv_nameCaller_4_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"nameCaller",
        		lv_nameCaller_4_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleStaticMethodCall
entryRuleStaticMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticMethodCallRule()); }
	 iv_ruleStaticMethodCall=ruleStaticMethodCall 
	 { $current=$iv_ruleStaticMethodCall.current; } 
	 EOF 
;

// Rule StaticMethodCall
ruleStaticMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStaticMethodCallAccess().getMethodWildcardNameConcatenatedParserRuleCall_0_0()); 
	    }
		lv_method_0_0=ruleWildcardNameConcatenated		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticMethodCallRule());
	        }
       		set(
       			$current, 
       			"method",
        		lv_method_0_0, 
        		"WildcardNameConcatenated");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStaticMethodCallAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStaticMethodCallAccess().getNameNameParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStaticMethodCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Name");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStaticMethodCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCalledMethodName
entryRuleCalledMethodName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCalledMethodNameRule()); }
	 iv_ruleCalledMethodName=ruleCalledMethodName 
	 { $current=$iv_ruleCalledMethodName.current; } 
	 EOF 
;

// Rule CalledMethodName
ruleCalledMethodName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getCalledMethodNameAccess().getValueWildcardNameParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleWildcardName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCalledMethodNameRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"WildcardName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getValueWildcardNameConcatenatedParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleWildcardNameConcatenated		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"WildcardNameConcatenated");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleName
entryRuleName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNameRule()); }
	 iv_ruleName=ruleName 
	 { $current=$iv_ruleName.current; } 
	 EOF 
;

// Rule Name
ruleName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_ID
		{
			newLeafNode(lv_value_0_0, grammarAccess.getNameAccess().getValueIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleWildcardNameConcatenated
entryRuleWildcardNameConcatenated returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardNameConcatenatedRule()); } 
	 iv_ruleWildcardNameConcatenated=ruleWildcardNameConcatenated 
	 { $current=$iv_ruleWildcardNameConcatenated.current.getText(); }  
	 EOF 
;

// Rule WildcardNameConcatenated
ruleWildcardNameConcatenated returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getWildcardNameConcatenatedAccess().getWildcardNameParserRuleCall_0()); 
    }
    this_WildcardName_0=ruleWildcardName    {
		$current.merge(this_WildcardName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWildcardNameConcatenatedAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getWildcardNameConcatenatedAccess().getWildcardNameParserRuleCall_1_1()); 
    }
    this_WildcardName_2=ruleWildcardName    {
		$current.merge(this_WildcardName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleWildcardName
entryRuleWildcardName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getWildcardNameRule()); } 
	 iv_ruleWildcardName=ruleWildcardName 
	 { $current=$iv_ruleWildcardName.current.getText(); }  
	 EOF 
;

// Rule WildcardName
ruleWildcardName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getWildcardNameAccess().getIDTerminalRuleCall_0()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWildcardNameAccess().getAsteriskKeyword_1()); 
    }

    |
	kw='?' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getWildcardNameAccess().getQuestionMarkKeyword_2()); 
    }
)+
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


