/*
* generated by Xtext
*/

package org.eclipselabs.recommenders.codesearch.rcp.dslQL2.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class QL2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVarsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVarsVarDeclarationParserRuleCall_1_1_0 = (RuleCall)cVarsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVarsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVarsVarDeclarationParserRuleCall_1_2_1_0 = (RuleCall)cVarsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		////import "http://www.eclipse.org/xtext/xbase/Xbase"
		////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
		////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
		//Model:
		//	{Model} ("(" vars+=VarDeclaration ("," vars+=VarDeclaration)* ")")? statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//{Model} ("(" vars+=VarDeclaration ("," vars+=VarDeclaration)* ")")? statements+=Statement*
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//("(" vars+=VarDeclaration ("," vars+=VarDeclaration)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//vars+=VarDeclaration
		public Assignment getVarsAssignment_1_1() { return cVarsAssignment_1_1; }

		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_1_1_0() { return cVarsVarDeclarationParserRuleCall_1_1_0; }

		//("," vars+=VarDeclaration)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//vars+=VarDeclaration
		public Assignment getVarsAssignment_1_2_1() { return cVarsAssignment_1_2_1; }

		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_1_2_1_0() { return cVarsVarDeclarationParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	VarDef //...
		//	| MethodCall;
		public ParserRule getRule() { return rule; }

		//VarDef //...
		//| MethodCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDef
		public RuleCall getVarDefParserRuleCall_0() { return cVarDefParserRuleCall_0; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall_1() { return cMethodCallParserRuleCall_1; }
	}

	public class VarDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVarsVarInitialisationParserRuleCall_0_0 = (RuleCall)cVarsAssignment_0.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarsVarDeclarationParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		
		//VarDef:
		//	vars+=VarInitialisation | vars+=VarDeclaration;
		public ParserRule getRule() { return rule; }

		//vars+=VarInitialisation | vars+=VarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//vars+=VarInitialisation
		public Assignment getVarsAssignment_0() { return cVarsAssignment_0; }

		//VarInitialisation
		public RuleCall getVarsVarInitialisationParserRuleCall_0_0() { return cVarsVarInitialisationParserRuleCall_0_0; }

		//vars+=VarDeclaration
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//VarDeclaration
		public RuleCall getVarsVarDeclarationParserRuleCall_1_0() { return cVarsVarDeclarationParserRuleCall_1_0; }
	}

	public class VarInitialisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarInitialisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVarNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VarInitialisation returns Var:
		//	type=Type name=VarName "=" / *[types::JvmIdentifiableElement|ValidID]* / "*";
		public ParserRule getRule() { return rule; }

		//type=Type name=VarName "=" / *[types::JvmIdentifiableElement|ValidID]* / "*"
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=VarName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VarName
		public RuleCall getNameVarNameParserRuleCall_1_0() { return cNameVarNameParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		/// *[types::JvmIdentifiableElement|ValidID]* / "*"
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVarNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//VarDeclaration returns Var:
		//	type=Type name=VarName;
		public ParserRule getRule() { return rule; }

		//type=Type name=VarName
		public Group getGroup() { return cGroup; }

		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }

		//name=VarName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//VarName
		public RuleCall getNameVarNameParserRuleCall_1_0() { return cNameVarNameParserRuleCall_1_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVarNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameWithWCTerminalRuleCall_2_0 = (RuleCall)cMethodAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	name=VarName "." method=NameWithWC "()";
		public ParserRule getRule() { return rule; }

		//name=VarName "." method=NameWithWC "()"
		public Group getGroup() { return cGroup; }

		//name=VarName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//VarName
		public RuleCall getNameVarNameParserRuleCall_0_0() { return cNameVarNameParserRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//method=NameWithWC
		public Assignment getMethodAssignment_2() { return cMethodAssignment_2; }

		//NameWithWC
		public RuleCall getMethodNameWithWCTerminalRuleCall_2_0() { return cMethodNameWithWCTerminalRuleCall_2_0; }

		//"()"
		public Keyword getLeftParenthesisRightParenthesisKeyword_3() { return cLeftParenthesisRightParenthesisKeyword_3; }
	}

	public class VarNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarName");
		private final RuleCall cNameWithWCTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VarName:
		//	NameWithWC;
		public ParserRule getRule() { return rule; }

		//NameWithWC
		public RuleCall getNameWithWCTerminalRuleCall() { return cNameWithWCTerminalRuleCall; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final RuleCall cNameWithWCTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Type:
		//	NameWithWC;
		public ParserRule getRule() { return rule; }

		//NameWithWC
		public RuleCall getNameWithWCTerminalRuleCall() { return cNameWithWCTerminalRuleCall; }
	}
	
	
	private ModelElements pModel;
	private StatementElements pStatement;
	private VarDefElements pVarDef;
	private VarInitialisationElements pVarInitialisation;
	private VarDeclarationElements pVarDeclaration;
	private MethodCallElements pMethodCall;
	private VarNameElements pVarName;
	private TypeElements pType;
	private TerminalRule tNameWithWC;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public QL2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "http://www.eclipse.org/xtext/xbase/Xbase"
	////import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
	////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	//Model:
	//	{Model} ("(" vars+=VarDeclaration ("," vars+=VarDeclaration)* ")")? statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Statement:
	//	VarDef //...
	//	| MethodCall;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//VarDef:
	//	vars+=VarInitialisation | vars+=VarDeclaration;
	public VarDefElements getVarDefAccess() {
		return (pVarDef != null) ? pVarDef : (pVarDef = new VarDefElements());
	}
	
	public ParserRule getVarDefRule() {
		return getVarDefAccess().getRule();
	}

	//VarInitialisation returns Var:
	//	type=Type name=VarName "=" / *[types::JvmIdentifiableElement|ValidID]* / "*";
	public VarInitialisationElements getVarInitialisationAccess() {
		return (pVarInitialisation != null) ? pVarInitialisation : (pVarInitialisation = new VarInitialisationElements());
	}
	
	public ParserRule getVarInitialisationRule() {
		return getVarInitialisationAccess().getRule();
	}

	//VarDeclaration returns Var:
	//	type=Type name=VarName;
	public VarDeclarationElements getVarDeclarationAccess() {
		return (pVarDeclaration != null) ? pVarDeclaration : (pVarDeclaration = new VarDeclarationElements());
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//MethodCall:
	//	name=VarName "." method=NameWithWC "()";
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//VarName:
	//	NameWithWC;
	public VarNameElements getVarNameAccess() {
		return (pVarName != null) ? pVarName : (pVarName = new VarNameElements());
	}
	
	public ParserRule getVarNameRule() {
		return getVarNameAccess().getRule();
	}

	//Type:
	//	NameWithWC;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal NameWithWC:
	//	("a".."z" | "A".."Z" | "_" | "*" | "?") ("a".."z" | "A".."Z" | "_" | "0".."9" | "*" | "?" | "." | "/")*;
	public TerminalRule getNameWithWCRule() {
		return (tNameWithWC != null) ? tNameWithWC : (tNameWithWC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NameWithWC"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
