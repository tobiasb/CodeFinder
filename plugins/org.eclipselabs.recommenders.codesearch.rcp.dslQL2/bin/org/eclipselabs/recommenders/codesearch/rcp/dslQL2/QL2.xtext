grammar org.eclipselabs.recommenders.codesearch.rcp.dslQL2.QL2 with org.eclipse.xtext.common.Terminals//org.eclipselabs.recommenders.codesearch.rcp.dslQL1.QL1

//import "platform:/resource/org.eclipselabs.recommenders.codesearch.rcp.dslQL1/src-gen/org/eclipselabs/recommenders/codesearch/rcp/dslQL1/QL1.genmodel"//"http://www.eclipselabs.org/recommenders/codesearch/rcp/dslQL1/QL1" as QL1
import "platform:/resource/org.eclipselabs.recommenders.codesearch.rcp.dslQL1/src-gen/org/eclipselabs/recommenders/codesearch/rcp/dslQL1/QL1.ecore" as QL1

generate qL2 "http://www.eclipselabs.org/recommenders/codesearch/rcp/dslQL2/QL2"


Model:
	{Model}
	('(' vars+=VarDeclarationParam (',' vars+=VarDeclarationParam)* ')')?//
	('{'
		(statements+=Statement )*
	'}')?
	;
	
//ParameterDefinition:
//	'(' vars+=VarDeclarationParam (',' vars+=VarDeclarationParam)* ')'
//;
	
Statement:
	( 'var' (VarInitialisation 
		| VarNullLiteral 
		| VarDeclaration
	) )
	| 'call' ( MethodCall)
	| 'scall' ( StaticMethodCall)
;

VarInitialisation:
	type=Type name=ID '=' '*'
;

VarNullLiteral:
	type=Type name=ID '=' 'null'
;

VarDeclaration:
	type=Type name=ID
;

VarDeclarationParam:
	type=Type name=ID
;
	
MethodCall:
	nameCallee=Name '.' method=CalledMethodName '(' (nameCaller=Name)?  ')'
;
	
StaticMethodCall:
	method=WildcardNameConcatenated '(' name=Name ')'
;

CalledMethodName: 
	value=WildcardName
;

Type:
	value=WildcardNameConcatenated
;

Name: 
	value=ID
;

WildcardNameConcatenated	: WildcardName ( '.' WildcardName)*;
WildcardName       			: (ID | '*' | '?')+;