grammar org.eclipselabs.recommenders.codesearch.rcp.dslQL2.QL2 with org.eclipse.xtext.common.Terminals

generate qL2 "http://www.eclipselabs.org/recommenders/codesearch/rcp/dslQL2/QL2"

//import "http://www.eclipse.org/xtext/xbase/Xbase"
//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model:
	{Model}
	('(' vars+=VarDeclarationParam (',' vars+=VarDeclarationParam)* ')')?
	('{'
		(statements+=Statement )*
	'}')?
	;
	
Statement:
	( 'var' (VarInitialisation 
		| VarNullLiteral 
		| VarDeclaration
	) )
	| 'call' ( MethodCall)
	| 'scall' ( StaticMethodCall)
;

VarInitialisation:
	type=Type name=ID '=' '*'
;

VarNullLiteral:
	type=Type name=ID '=' 'null'
;

VarDeclaration:
	type=Type name=ID
;

VarDeclarationParam:
	type=Type name=ID
;
	
MethodCall:
	nameCallee=Name '.' method=WildcardName '(' (nameCaller=Name)?  ')'
;
	
StaticMethodCall:
	method=WildcardNameConcatenated '(' name=Name ')'
;

Type:
	value=WildcardNameConcatenated
;

Name: 
	value=ID
;

WildcardNameConcatenated	: WildcardName ( '.' WildcardName)*;
WildcardName       			: (ID | '*' | '?')+;