grammar org.eclipselabs.recommenders.codesearch.rcp.dsl.LuceneQuery 
	with org.eclipse.xtext.common.Terminals//org.eclipse.xtext.xbase.Xtype

generate luceneQuery 'http://www.eclipselabs.org/recommenders/codesearch/rcp/dsl/LuceneQuery'


/* * 
 *   Query  ::= ( Clause )*
 *   Clause ::= ["+", "-"] [<TERM> ":"] ( <TERM> | "(" Query ")" )
 * */
 
	OrExp returns Expression:
	 AndExp ( {OrExp.left=current} or=BinaryOr? right=OrExp )?; // Right associativity. Why? See http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
	 
	AndExp returns Expression:
	 Primary ( {AndExp.left=current} and=BinaryAnd right=AndExp )?; // Right associativity. Why? See http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
	
	Primary returns Expression:
	 value=ClauseExpression | (UnaryExpression? '(' OrExp ')' Boost?);
	 	  
	  
/*
	The following rules are generated. Do not modify. Modify source file instead.
*/

	//Generated Rule. Do not modify!
	ClauseExpression:
		(UnaryExpression)? 
		(
			default=SimpleFieldValue Boost? | // Default field
			(
				(
					field=SimpleField ':' 
					(
						(values+=SimpleFieldValue)
						| ('('(UnaryExpression? values+=SimpleFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=TypeField ':' 
					(
						(values+=TypeFieldValue)
						| ('('(UnaryExpression? values+=TypeFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=MethodField ':' 
					(
						(values+=MethodFieldValue)
						| ('('(UnaryExpression? values+=MethodFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=FilePathField ':' 
					(
						(values+=FilePathFieldValue)
						| ('('(UnaryExpression? values+=FilePathFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=NumberField ':' 
					(
						(values+=NumberFieldValue)
						| ('('(UnaryExpression? values+=NumberFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=ModifierField ':' 
					(
						(values+=ModifierFieldValue)
						| ('('(UnaryExpression? values+=ModifierFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=TimeField ':' 
					(
						(values+=TimeFieldValue)
						| ('('(UnaryExpression? values+=TimeFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=DocumentTypeField ':' 
					(
						(values+=DocumentTypeFieldValue)
						| ('('(UnaryExpression? values+=DocumentTypeFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=ProjectNameField ':' 
					(
						(values+=ProjectNameFieldValue)
						| ('('(UnaryExpression? values+=ProjectNameFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=AnnotationField ':' 
					(
						(values+=AnnotationFieldValue)
						| ('('(UnaryExpression? values+=AnnotationFieldValue Boost?)*')')
					) Boost?
				)
			| 	(
					field=DefinitionType ':' 
					(
						(values+=DefinitionTypeValue)
						| ('('(UnaryExpression? values+=DefinitionTypeValue Boost?)*')')
					) Boost?
				)
			)
		)
	;

	//Generated Rule. Do not modify!
	SimpleField:
			value='FullyQualifiedName'
		| 	value='FriendlyName'
		| 	value='ReturnVariableExpressions'
		| 	value='AllDeclaredMethodNames'
		| 	value='DeclaredMethodNames'
		| 	value='DeclaredFieldNames'
		| 	value='AllDeclaredFieldNames'
		| 	value='FullText'
		| 	value='FieldsRead'
		| 	value='FieldsWritten'
		| 	value='UsedFieldsInFinally'
		| 	value='UsedFieldsInTry'
		| 	value='VariableName'
		| 	value='ParameterTypesStructural'
	;
	
	//Generated Rule. Do not modify!
	TypeField:
			value='ImplementedTypes'
		| 	value='ExtendedTypes'
		| 	value='UsedTypes'
		| 	value='UsedTypesInTry'
		| 	value='UsedTypesInFinally'
		| 	value='ParameterTypes'
		| 	value='ReturnType'
		| 	value='InstanceofTypes'
		| 	value='AllImplementedTypes'
		| 	value='AllExtendedTypes'
		| 	value='FieldType'
		| 	value='CaughtType'
		| 	value='DeclaredFieldTypes'
		| 	value='DeclaringType'
		| 	value='VariableType'
		| 	value='CheckedExceptions'
	;
	
	//Generated Rule. Do not modify!
	MethodField:
			value='UsedMethods'
		| 	value='UsedMethodsInTry'
		| 	value='UsedMethodsInFinally'
		| 	value='OverriddenMethods'
		| 	value='DeclaredMethods'
		| 	value='DeclaringMethod'
		| 	value='UsedAsParameterInMethods'
		| 	value='UsedAsTargetForMethods'
	;
	
	//Generated Rule. Do not modify!
	FilePathField:
			value='ResourcePath'
	;
	
	//Generated Rule. Do not modify!
	NumberField:
			value='ParameterCount'
	;
	
	//Generated Rule. Do not modify!
	ModifierField:
			value='Modifiers'
	;
	
	//Generated Rule. Do not modify!
	TimeField:
			value='Timestamp'
	;
	
	//Generated Rule. Do not modify!
	DocumentTypeField:
			value='Type'
	;
	
	//Generated Rule. Do not modify!
	ProjectNameField:
			value='ProjectName'
	;
	
	//Generated Rule. Do not modify!
	AnnotationField:
			value='Annotations'
	;
	
	//Generated Rule. Do not modify!
	DefinitionType:
			value='VariableDefinition'
	;
	
	/*
	End of generated rules.
	*/
	

	SimpleFieldValue:
		NameWithWC
	;
	
	MethodFieldValue:
		NameWithWC
	;
	
	ProjectNameFieldValue:
		NameWithWC
	;
	
	NumberFieldValue:
		INT
	;
	
	ModifierFieldValue:
		'private'
		| 'public' 
		| 'static' 
		| 'final'
		| 'abstract' 
		| 'protected'
	;
	
	TimeFieldValue:
		NameWithWC
	;
	
	DocumentTypeFieldValue:
		'class'
		| 'method'
		| 'field'
		| 'trycatch'
		| 'varusage'
	;
	
	AnnotationFieldValue:
		NameWithWC
	;
	
	TypeFieldValue:
		NameWithWC
	;
	
	DefinitionTypeValue:
	    'parameter'
	    | 'nullLiteral'
	    | 'methodInvocation'
	    | 'instanceCreation'
	    | 'uninitialized'
	;
	
	enum BinaryOr returns BinaryExp:
		or1='OR' | or2='||'
	;
	
	enum BinaryAnd returns BinaryExp:
		and1='AND'
	;

	UnaryExpression:
		('-' | 'NOT' | '!' | '+')
	;
	
	terminal Boost:
		'^' ('0'..'9')+ ('.' ('0'..'9')+)? 
	;
	
	terminal NameWithWC		: ('a'..'z'|'A'..'Z'|'_'|'*'|'?'|'<'|'>'|'['|']') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'<'|'>'|'['|']'|'.')*;
	terminal PathWithWC  	: (('A'..'Z' ':') | ('a'..'z'|'A'..'Z'|'_'|'/')) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'.'|'/')*;
	
	FilePathFieldValue:
		PathWithWC
	;
	//-----------------

