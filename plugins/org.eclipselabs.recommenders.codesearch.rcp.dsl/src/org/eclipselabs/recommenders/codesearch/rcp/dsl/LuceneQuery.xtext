/**
 * Copyright (c) 2012 Tobias Boehm.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *    Tobias Boehm - initial API and implementation.
 */
grammar org.eclipselabs.recommenders.codesearch.rcp.dsl.LuceneQuery 
	with org.eclipse.xtext.common.Terminals

generate luceneQuery 'http://www.eclipselabs.org/recommenders/codesearch/rcp/dsl/LuceneQuery'

// Right associativity. Why? See http://blog.efftinge.de/2010/08/parsing-expressions-with-xtext.html
OrExp returns Expression:
 AndExp ( {OrExp.left=current} or=BinaryOr? right=OrExp )?; 
 
AndExp returns Expression:
 Primary ( {AndExp.left=current} and=BinaryAnd right=AndExp )?;

Primary returns Expression:
 value=ClauseExpression | (UnaryExpression? '(' OrExp ')' Boost?);
	 	  
	  
/*
The following rules are generated. Do not modify. Modify source file instead.
*/

//Generated Rule. Do not modify!
ClauseExpression:
	(UnaryExpression)? 
	(
		default=SimpleFieldValue Boost? | // Default field
		(
			(
				field=DocumentTypeField ':' 
				(
					(values+=DocumentTypeFieldValue)
					| ('('(UnaryExpression? values+=DocumentTypeFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=SimpleField ':' 
				(
					(values+=SimpleFieldValue)
					| ('('(UnaryExpression? values+=SimpleFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=TypeField ':' 
				(
					(values+=TypeFieldValue)
					| ('('(UnaryExpression? values+=TypeFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=MethodField ':' 
				(
					(values+=MethodFieldValue)
					| ('('(UnaryExpression? values+=MethodFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=FilePathField ':' 
				(
					(values+=FilePathFieldValue)
					| ('('(UnaryExpression? values+=FilePathFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=NumberField ':' 
				(
					(values+=NumberFieldValue)
					| ('('(UnaryExpression? values+=NumberFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=ModifierField ':' 
				(
					(values+=ModifierFieldValue)
					| ('('(UnaryExpression? values+=ModifierFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=ProjectNameField ':' 
				(
					(values+=ProjectNameFieldValue)
					| ('('(UnaryExpression? values+=ProjectNameFieldValue Boost?)*')')
				) Boost?
			)
		| 	(
				field=DefinitionType ':' 
				(
					(values+=DefinitionTypeValue)
					| ('('(UnaryExpression? values+=DefinitionTypeValue Boost?)*')')
				) Boost?
			)
		)
	)
;

//Generated Rule. Do not modify!
DocumentTypeField:
		value='Type'
;

//Generated Rule. Do not modify!
SimpleField:
		value='FriendlyName'
	| 	value='ReturnVariableExpressions'
	| 	value='AllDeclaredMethodNames'
	| 	value='DeclaredMethodNames'
	| 	value='DeclaredFieldNames'
	| 	value='AllDeclaredFieldNames'
	| 	value='FullText'
	| 	value='FieldsRead'
	| 	value='FieldsWritten'
	| 	value='UsedFieldsInFinally'
	| 	value='UsedFieldsInTry'
	| 	value='VariableName'
	| 	value='ParameterTypesStructural'
	| 	value='Annotations'
;

//Generated Rule. Do not modify!
TypeField:
		value='FullyQualifiedName'
	| 	value='ImplementedTypes'
	| 	value='ExtendedTypes'
	| 	value='UsedTypes'
	| 	value='UsedTypesInTry'
	| 	value='UsedTypesInFinally'
	| 	value='ParameterTypes'
	| 	value='ReturnType'
	| 	value='InstanceofTypes'
	| 	value='AllImplementedTypes'
	| 	value='AllExtendedTypes'
	| 	value='FieldType'
	| 	value='CaughtType'
	| 	value='DeclaredFieldTypes'
	| 	value='DeclaringType'
	| 	value='VariableType'
	| 	value='CheckedExceptions'
;

//Generated Rule. Do not modify!
MethodField:
		value='UsedMethods'
	| 	value='UsedMethodsInTry'
	| 	value='UsedMethodsInFinally'
	| 	value='OverriddenMethods'
	| 	value='DeclaredMethods'
	| 	value='DeclaringMethod'
	| 	value='UsedAsParameterInMethods'
	| 	value='UsedAsTargetForMethods'
;

//Generated Rule. Do not modify!
FilePathField:
		value='ResourcePath'
;

//Generated Rule. Do not modify!
NumberField:
		value='ParameterCount'
	| 	value='Timestamp'
;

//Generated Rule. Do not modify!
ModifierField:
		value='Modifiers'
;

//Generated Rule. Do not modify!
ProjectNameField:
		value='ProjectName'
;

//Generated Rule. Do not modify!
DefinitionType:
		value='VariableDefinition'
;

/*
End of generated rules.
*/



SimpleFieldValue:
	QuotedNameWithWC | NameWithWC
;

MethodFieldValue:
	NameWithWC
;

ProjectNameFieldValue:
	NameWithWC
;

NumberFieldValue:
	INT
;

ModifierFieldValue:
	'private'
	| 'public' 
	| 'static' 
	| 'final'
	| 'abstract' 
	| 'protected'
;

DocumentTypeFieldValue:
	'type'
	| 'method'
	| 'field'
	| 'trycatch'
	| 'varusage'
;

TypeFieldValue:
	NameWithWC
;

DefinitionTypeValue:
    'parameter'
    | 'nullLiteral'
    | 'methodInvocation'
    | 'instanceCreation'
    | 'uninitialized'
;

enum BinaryOr returns BinaryExp:
	or1='OR' | or2='||'
;

enum BinaryAnd returns BinaryExp:
	and1='AND' | and2='&&'
;

UnaryExpression:
	('-' | 'NOT' | '!' | '+')
;

terminal Boost:
	'^' ('0'..'9')+ ('.' ('0'..'9')+)? 
;

terminal QuotedNameWithWC : ('"' ' '? NameWithWC (' ' NameWithWC?)* '"');
terminal EscapedSpecialChar: ('\\' LuceneSpecialChar);
terminal NameWithWC		: ('a'..'z'|'A'..'Z'|'_'|'*'|'?'|'<'|'>'|'['|']'|EscapedSpecialChar) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'<'|'>'|'['|']'|EscapedSpecialChar|'.')*;
//terminal MethodWithWC   : NameWithWC* ('(' (NameWithWC (',' NameWithWC)*)? ')')?;
terminal PathWithWC  	: (('A'..'Z' ':') | ('a'..'z'|'A'..'Z'|'_'|'/')) ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'.'|'/')*;
terminal LuceneSpecialChar: ('+'|'-'|'&&'|'||'|'!'|'('|')'|'{'|'}'|'['|']'|'^'|'"'|'~'|'*'|'?'|':'|'\\');

FilePathFieldValue:
	PathWithWC
;

