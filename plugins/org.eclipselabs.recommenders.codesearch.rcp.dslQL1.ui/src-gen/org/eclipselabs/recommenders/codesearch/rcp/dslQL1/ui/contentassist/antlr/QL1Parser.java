/*
* generated by Xtext
*/
package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.recommenders.codesearch.rcp.dslQL1.services.QL1GrammarAccess;

public class QL1Parser extends AbstractContentAssistParser {
	
	@Inject
	private QL1GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser createParser() {
		org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser result = new org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getFieldExprAccess().getAlternatives(), "rule__FieldExpr__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getMultiValueFieldAccess().getAlternatives_2(), "rule__MultiValueField__Alternatives_2");
					put(grammarAccess.getBooleanFieldAccess().getAlternatives_1(), "rule__BooleanField__Alternatives_1");
					put(grammarAccess.getBinaryExpAccess().getAlternatives(), "rule__BinaryExp__Alternatives");
					put(grammarAccess.getFirstAccess().getGroup(), "rule__First__Group__0");
					put(grammarAccess.getFirstAccess().getGroup_3(), "rule__First__Group_3__0");
					put(grammarAccess.getFirstAccess().getGroup_3_4(), "rule__First__Group_3_4__0");
					put(grammarAccess.getContainsAccess().getGroup(), "rule__Contains__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup(), "rule__OrExpr__Group__0");
					put(grammarAccess.getOrExprAccess().getGroup_1(), "rule__OrExpr__Group_1__0");
					put(grammarAccess.getAndExprAccess().getGroup(), "rule__AndExpr__Group__0");
					put(grammarAccess.getAndExprAccess().getGroup_1(), "rule__AndExpr__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getSingleValueFieldAccess().getGroup(), "rule__SingleValueField__Group__0");
					put(grammarAccess.getMultiValueFieldAccess().getGroup(), "rule__MultiValueField__Group__0");
					put(grammarAccess.getMultiValueFieldAccess().getGroup_2_1(), "rule__MultiValueField__Group_2_1__0");
					put(grammarAccess.getMultiValueFieldAccess().getGroup_2_1_2(), "rule__MultiValueField__Group_2_1_2__0");
					put(grammarAccess.getBooleanFieldAccess().getGroup(), "rule__BooleanField__Group__0");
					put(grammarAccess.getFirstAccess().getTypeAssignment_0(), "rule__First__TypeAssignment_0");
					put(grammarAccess.getFirstAccess().getEAssignment_2(), "rule__First__EAssignment_2");
					put(grammarAccess.getFirstAccess().getCAssignment_3_2(), "rule__First__CAssignment_3_2");
					put(grammarAccess.getFirstAccess().getCAssignment_3_4_2(), "rule__First__CAssignment_3_4_2");
					put(grammarAccess.getContainsAccess().getTypeAssignment_0(), "rule__Contains__TypeAssignment_0");
					put(grammarAccess.getContainsAccess().getEAssignment_2(), "rule__Contains__EAssignment_2");
					put(grammarAccess.getOrExprAccess().getRightAssignment_1_2(), "rule__OrExpr__RightAssignment_1_2");
					put(grammarAccess.getAndExprAccess().getRightAssignment_1_2(), "rule__AndExpr__RightAssignment_1_2");
					put(grammarAccess.getTypeAccess().getValueAssignment_0(), "rule__Type__ValueAssignment_0");
					put(grammarAccess.getTypeAccess().getMethodAssignment_1(), "rule__Type__MethodAssignment_1");
					put(grammarAccess.getSingleValueFieldAccess().getNameAssignment_0(), "rule__SingleValueField__NameAssignment_0");
					put(grammarAccess.getSingleValueFieldAccess().getNAssignment_1(), "rule__SingleValueField__NAssignment_1");
					put(grammarAccess.getSingleValueFieldAccess().getValueAssignment_3(), "rule__SingleValueField__ValueAssignment_3");
					put(grammarAccess.getMultiValueFieldAccess().getNameAssignment_0(), "rule__MultiValueField__NameAssignment_0");
					put(grammarAccess.getMultiValueFieldAccess().getValuesAssignment_2_0(), "rule__MultiValueField__ValuesAssignment_2_0");
					put(grammarAccess.getMultiValueFieldAccess().getValuesAssignment_2_1_1(), "rule__MultiValueField__ValuesAssignment_2_1_1");
					put(grammarAccess.getMultiValueFieldAccess().getValuesAssignment_2_1_2_1(), "rule__MultiValueField__ValuesAssignment_2_1_2_1");
					put(grammarAccess.getBooleanFieldAccess().getNAssignment_0(), "rule__BooleanField__NAssignment_0");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_0(), "rule__BooleanField__ValueAssignment_1_0");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_1(), "rule__BooleanField__ValueAssignment_1_1");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_2(), "rule__BooleanField__ValueAssignment_1_2");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_3(), "rule__BooleanField__ValueAssignment_1_3");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_4(), "rule__BooleanField__ValueAssignment_1_4");
					put(grammarAccess.getBooleanFieldAccess().getValueAssignment_1_5(), "rule__BooleanField__ValueAssignment_1_5");
					put(grammarAccess.getSingleValueFieldNameAccess().getValueAssignment(), "rule__SingleValueFieldName__ValueAssignment");
					put(grammarAccess.getMultiValueFieldNameAccess().getValueAssignment(), "rule__MultiValueFieldName__ValueAssignment");
					put(grammarAccess.getNegationAccess().getValueAssignment(), "rule__Negation__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser typedParser = (org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser) parser;
			typedParser.entryRuleFirst();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public QL1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(QL1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
