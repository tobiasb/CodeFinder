/*
* generated by Xtext
*/
package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.recommenders.codesearch.rcp.dslQL1.services.QL1GrammarAccess;

public class QL1Parser extends AbstractContentAssistParser {
	
	@Inject
	private QL1GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser createParser() {
		org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser result = new org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModifierAccess().getAlternatives(), "rule__Modifier__Alternatives");
					put(grammarAccess.getParameterElementHolderAccess().getAlternatives(), "rule__ParameterElementHolder__Alternatives");
					put(grammarAccess.getParameterTypeAccess().getAlternatives(), "rule__ParameterType__Alternatives");
					put(grammarAccess.getMethodPatternDefinitionAccess().getGroup(), "rule__MethodPatternDefinition__Group__0");
					put(grammarAccess.getParameterDefinitionAccess().getGroup(), "rule__ParameterDefinition__Group__0");
					put(grammarAccess.getParameterDefinitionAccess().getGroup_2(), "rule__ParameterDefinition__Group_2__0");
					put(grammarAccess.getMultiElementAccess().getGroup(), "rule__MultiElement__Group__0");
					put(grammarAccess.getMultiElementAccess().getGroup_2(), "rule__MultiElement__Group_2__0");
					put(grammarAccess.getThrowsAccess().getGroup(), "rule__Throws__Group__0");
					put(grammarAccess.getMethodPatternAccess().getDefinitionAssignment(), "rule__MethodPattern__DefinitionAssignment");
					put(grammarAccess.getMethodPatternDefinitionAccess().getModifiersAssignment_0(), "rule__MethodPatternDefinition__ModifiersAssignment_0");
					put(grammarAccess.getMethodPatternDefinitionAccess().getReturnTypeAssignment_1(), "rule__MethodPatternDefinition__ReturnTypeAssignment_1");
					put(grammarAccess.getMethodPatternDefinitionAccess().getMethodNameAssignment_2(), "rule__MethodPatternDefinition__MethodNameAssignment_2");
					put(grammarAccess.getMethodPatternDefinitionAccess().getParameterDefinitionAssignment_3(), "rule__MethodPatternDefinition__ParameterDefinitionAssignment_3");
					put(grammarAccess.getMethodPatternDefinitionAccess().getThrowsClauseAssignment_4(), "rule__MethodPatternDefinition__ThrowsClauseAssignment_4");
					put(grammarAccess.getParameterDefinitionAccess().getParameterElementholderAssignment_1(), "rule__ParameterDefinition__ParameterElementholderAssignment_1");
					put(grammarAccess.getParameterDefinitionAccess().getParameterElementholderAssignment_2_1(), "rule__ParameterDefinition__ParameterElementholderAssignment_2_1");
					put(grammarAccess.getModifierAccess().getValueAssignment_0(), "rule__Modifier__ValueAssignment_0");
					put(grammarAccess.getModifierAccess().getValueAssignment_1(), "rule__Modifier__ValueAssignment_1");
					put(grammarAccess.getModifierAccess().getValueAssignment_2(), "rule__Modifier__ValueAssignment_2");
					put(grammarAccess.getModifierAccess().getValueAssignment_3(), "rule__Modifier__ValueAssignment_3");
					put(grammarAccess.getModifierAccess().getValueAssignment_4(), "rule__Modifier__ValueAssignment_4");
					put(grammarAccess.getModifierAccess().getValueAssignment_5(), "rule__Modifier__ValueAssignment_5");
					put(grammarAccess.getReturnTypeAccess().getValueAssignment(), "rule__ReturnType__ValueAssignment");
					put(grammarAccess.getParameterElementHolderAccess().getElementAssignment_0(), "rule__ParameterElementHolder__ElementAssignment_0");
					put(grammarAccess.getParameterElementHolderAccess().getElementAssignment_1(), "rule__ParameterElementHolder__ElementAssignment_1");
					put(grammarAccess.getSingleElementAccess().getValueAssignment(), "rule__SingleElement__ValueAssignment");
					put(grammarAccess.getMultiElementAccess().getElementsAssignment_1(), "rule__MultiElement__ElementsAssignment_1");
					put(grammarAccess.getMultiElementAccess().getElementsAssignment_2_1(), "rule__MultiElement__ElementsAssignment_2_1");
					put(grammarAccess.getParameterTypeAccess().getValueAssignment_0(), "rule__ParameterType__ValueAssignment_0");
					put(grammarAccess.getParameterTypeAccess().getValueAssignment_1(), "rule__ParameterType__ValueAssignment_1");
					put(grammarAccess.getThrowsAccess().getValueAssignment_1(), "rule__Throws__ValueAssignment_1");
					put(grammarAccess.getMethodNameAccess().getValueAssignment(), "rule__MethodName__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser typedParser = (org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal.InternalQL1Parser) parser;
			typedParser.entryRuleMethodPattern();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public QL1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(QL1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
