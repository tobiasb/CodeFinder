/*
* generated by Xtext
*/
grammar InternalQL1;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.recommenders.codesearch.rcp.dslQL1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.recommenders.codesearch.rcp.dslQL1.services.QL1GrammarAccess;

}

@parser::members {
 
 	private QL1GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(QL1GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleMethodPattern
entryRuleMethodPattern 
:
{ before(grammarAccess.getMethodPatternRule()); }
	 ruleMethodPattern
{ after(grammarAccess.getMethodPatternRule()); } 
	 EOF 
;

// Rule MethodPattern
ruleMethodPattern
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodPatternAccess().getGroup()); }
(rule__MethodPattern__Group__0)
{ after(grammarAccess.getMethodPatternAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModifier
entryRuleModifier 
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModifierAccess().getAlternatives()); }
(rule__Modifier__Alternatives)
{ after(grammarAccess.getModifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnType
entryRuleReturnType 
:
{ before(grammarAccess.getReturnTypeRule()); }
	 ruleReturnType
{ after(grammarAccess.getReturnTypeRule()); } 
	 EOF 
;

// Rule ReturnType
ruleReturnType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnTypeAccess().getValueAssignment()); }
(rule__ReturnType__ValueAssignment)
{ after(grammarAccess.getReturnTypeAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterElement
entryRuleParameterElement 
:
{ before(grammarAccess.getParameterElementRule()); }
	 ruleParameterElement
{ after(grammarAccess.getParameterElementRule()); } 
	 EOF 
;

// Rule ParameterElement
ruleParameterElement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterElementAccess().getAlternatives()); }
(rule__ParameterElement__Alternatives)
{ after(grammarAccess.getParameterElementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterType
entryRuleParameterType 
:
{ before(grammarAccess.getParameterTypeRule()); }
	 ruleParameterType
{ after(grammarAccess.getParameterTypeRule()); } 
	 EOF 
;

// Rule ParameterType
ruleParameterType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterTypeAccess().getAlternatives()); }
(rule__ParameterType__Alternatives)
{ after(grammarAccess.getParameterTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleThrows
entryRuleThrows 
:
{ before(grammarAccess.getThrowsRule()); }
	 ruleThrows
{ after(grammarAccess.getThrowsRule()); } 
	 EOF 
;

// Rule Throws
ruleThrows
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getThrowsAccess().getGroup()); }
(rule__Throws__Group__0)
{ after(grammarAccess.getThrowsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodName
entryRuleMethodName 
:
{ before(grammarAccess.getMethodNameRule()); }
	 ruleMethodName
{ after(grammarAccess.getMethodNameRule()); } 
	 EOF 
;

// Rule MethodName
ruleMethodName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodNameAccess().getValueAssignment()); }
(rule__MethodName__ValueAssignment)
{ after(grammarAccess.getMethodNameAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Modifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValueAssignment_0()); }
(rule__Modifier__ValueAssignment_0)
{ after(grammarAccess.getModifierAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getValueAssignment_1()); }
(rule__Modifier__ValueAssignment_1)
{ after(grammarAccess.getModifierAccess().getValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getValueAssignment_2()); }
(rule__Modifier__ValueAssignment_2)
{ after(grammarAccess.getModifierAccess().getValueAssignment_2()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getValueAssignment_3()); }
(rule__Modifier__ValueAssignment_3)
{ after(grammarAccess.getModifierAccess().getValueAssignment_3()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getValueAssignment_4()); }
(rule__Modifier__ValueAssignment_4)
{ after(grammarAccess.getModifierAccess().getValueAssignment_4()); }
)

    |(
{ before(grammarAccess.getModifierAccess().getValueAssignment_5()); }
(rule__Modifier__ValueAssignment_5)
{ after(grammarAccess.getModifierAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getGroup_0()); }
(rule__ParameterElement__Group_0__0)
{ after(grammarAccess.getParameterElementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getParameterElementAccess().getGroup_1()); }
(rule__ParameterElement__Group_1__0)
{ after(grammarAccess.getParameterElementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypeAccess().getValueAssignment_0()); }
(rule__ParameterType__ValueAssignment_0)
{ after(grammarAccess.getParameterTypeAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getParameterTypeAccess().getValueAssignment_1()); }
(rule__ParameterType__ValueAssignment_1)
{ after(grammarAccess.getParameterTypeAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__MethodPattern__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group__0__Impl
	rule__MethodPattern__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getModifiersAssignment_0()); }
(rule__MethodPattern__ModifiersAssignment_0)*
{ after(grammarAccess.getMethodPatternAccess().getModifiersAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group__1__Impl
	rule__MethodPattern__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getReturnTypeAssignment_1()); }
(rule__MethodPattern__ReturnTypeAssignment_1)
{ after(grammarAccess.getMethodPatternAccess().getReturnTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group__2__Impl
	rule__MethodPattern__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getMethodNameAssignment_2()); }
(rule__MethodPattern__MethodNameAssignment_2)
{ after(grammarAccess.getMethodPatternAccess().getMethodNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group__3__Impl
	rule__MethodPattern__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getGroup_3()); }
(rule__MethodPattern__Group_3__0)?
{ after(grammarAccess.getMethodPatternAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getThrowsClauseAssignment_4()); }
(rule__MethodPattern__ThrowsClauseAssignment_4)?
{ after(grammarAccess.getMethodPatternAccess().getThrowsClauseAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MethodPattern__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3__0__Impl
	rule__MethodPattern__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getLeftParenthesisKeyword_3_0()); }

	'(' 

{ after(grammarAccess.getMethodPatternAccess().getLeftParenthesisKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3__1__Impl
	rule__MethodPattern__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getParameterElementsAssignment_3_1()); }
(rule__MethodPattern__ParameterElementsAssignment_3_1)
{ after(grammarAccess.getMethodPatternAccess().getParameterElementsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3__2__Impl
	rule__MethodPattern__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getGroup_3_2()); }
(rule__MethodPattern__Group_3_2__0)*
{ after(grammarAccess.getMethodPatternAccess().getGroup_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getRightParenthesisKeyword_3_3()); }

	')' 

{ after(grammarAccess.getMethodPatternAccess().getRightParenthesisKeyword_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MethodPattern__Group_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3_2__0__Impl
	rule__MethodPattern__Group_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getCommaKeyword_3_2_0()); }

	',' 

{ after(grammarAccess.getMethodPatternAccess().getCommaKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodPattern__Group_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodPattern__Group_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__Group_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getParameterElementsAssignment_3_2_1()); }
(rule__MethodPattern__ParameterElementsAssignment_3_2_1)
{ after(grammarAccess.getMethodPatternAccess().getParameterElementsAssignment_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterElement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_0__0__Impl
	rule__ParameterElement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getParameterElementAction_0_0()); }
(

)
{ after(grammarAccess.getParameterElementAccess().getParameterElementAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getValuesAssignment_0_1()); }
(rule__ParameterElement__ValuesAssignment_0_1)
{ after(grammarAccess.getParameterElementAccess().getValuesAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterElement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__0__Impl
	rule__ParameterElement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getLeftCurlyBracketKeyword_1_0()); }

	'{' 

{ after(grammarAccess.getParameterElementAccess().getLeftCurlyBracketKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__1__Impl
	rule__ParameterElement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypesAssignment_1_1()); }
(rule__ParameterElement__TypesAssignment_1_1)
{ after(grammarAccess.getParameterElementAccess().getTypesAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__2__Impl
	rule__ParameterElement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getGroup_1_2()); }
(rule__ParameterElement__Group_1_2__0)*
{ after(grammarAccess.getParameterElementAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getRightCurlyBracketKeyword_1_3()); }

	'}' 

{ after(grammarAccess.getParameterElementAccess().getRightCurlyBracketKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ParameterElement__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1_2__0__Impl
	rule__ParameterElement__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getParameterElementAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterElement__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterElement__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypesAssignment_1_2_1()); }
(rule__ParameterElement__TypesAssignment_1_2_1)
{ after(grammarAccess.getParameterElementAccess().getTypesAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Throws__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Throws__Group__0__Impl
	rule__Throws__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Throws__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowsAccess().getThrowsKeyword_0()); }

	'throws' 

{ after(grammarAccess.getThrowsAccess().getThrowsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Throws__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Throws__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Throws__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowsAccess().getValueAssignment_1()); }
(rule__Throws__ValueAssignment_1)
{ after(grammarAccess.getThrowsAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__MethodPattern__ModifiersAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getModifiersModifierParserRuleCall_0_0()); }
	ruleModifier{ after(grammarAccess.getMethodPatternAccess().getModifiersModifierParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__ReturnTypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getReturnTypeReturnTypeParserRuleCall_1_0()); }
	ruleReturnType{ after(grammarAccess.getMethodPatternAccess().getReturnTypeReturnTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__MethodNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getMethodNameMethodNameParserRuleCall_2_0()); }
	ruleMethodName{ after(grammarAccess.getMethodPatternAccess().getMethodNameMethodNameParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__ParameterElementsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getParameterElementsParameterElementParserRuleCall_3_1_0()); }
	ruleParameterElement{ after(grammarAccess.getMethodPatternAccess().getParameterElementsParameterElementParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__ParameterElementsAssignment_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getParameterElementsParameterElementParserRuleCall_3_2_1_0()); }
	ruleParameterElement{ after(grammarAccess.getMethodPatternAccess().getParameterElementsParameterElementParserRuleCall_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodPattern__ThrowsClauseAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodPatternAccess().getThrowsClauseThrowsParserRuleCall_4_0()); }
	ruleThrows{ after(grammarAccess.getMethodPatternAccess().getThrowsClauseThrowsParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValueStaticKeyword_0_0()); }
(
{ before(grammarAccess.getModifierAccess().getValueStaticKeyword_0_0()); }

	'static' 

{ after(grammarAccess.getModifierAccess().getValueStaticKeyword_0_0()); }
)

{ after(grammarAccess.getModifierAccess().getValueStaticKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValuePrivateKeyword_1_0()); }
(
{ before(grammarAccess.getModifierAccess().getValuePrivateKeyword_1_0()); }

	'private' 

{ after(grammarAccess.getModifierAccess().getValuePrivateKeyword_1_0()); }
)

{ after(grammarAccess.getModifierAccess().getValuePrivateKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValuePublicKeyword_2_0()); }
(
{ before(grammarAccess.getModifierAccess().getValuePublicKeyword_2_0()); }

	'public' 

{ after(grammarAccess.getModifierAccess().getValuePublicKeyword_2_0()); }
)

{ after(grammarAccess.getModifierAccess().getValuePublicKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValueFinalKeyword_3_0()); }
(
{ before(grammarAccess.getModifierAccess().getValueFinalKeyword_3_0()); }

	'final' 

{ after(grammarAccess.getModifierAccess().getValueFinalKeyword_3_0()); }
)

{ after(grammarAccess.getModifierAccess().getValueFinalKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValueAbstractKeyword_4_0()); }
(
{ before(grammarAccess.getModifierAccess().getValueAbstractKeyword_4_0()); }

	'abstract' 

{ after(grammarAccess.getModifierAccess().getValueAbstractKeyword_4_0()); }
)

{ after(grammarAccess.getModifierAccess().getValueAbstractKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getValueProtectedKeyword_5_0()); }
(
{ before(grammarAccess.getModifierAccess().getValueProtectedKeyword_5_0()); }

	'protected' 

{ after(grammarAccess.getModifierAccess().getValueProtectedKeyword_5_0()); }
)

{ after(grammarAccess.getModifierAccess().getValueProtectedKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnType__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnTypeAccess().getValueNameWithWCTerminalRuleCall_0()); }
	RULE_NAMEWITHWC{ after(grammarAccess.getReturnTypeAccess().getValueNameWithWCTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__ValuesAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getValuesParameterTypeParserRuleCall_0_1_0()); }
	ruleParameterType{ after(grammarAccess.getParameterElementAccess().getValuesParameterTypeParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__TypesAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypesParameterTypeParserRuleCall_1_1_0()); }
	ruleParameterType{ after(grammarAccess.getParameterElementAccess().getTypesParameterTypeParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterElement__TypesAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterElementAccess().getTypesParameterTypeParserRuleCall_1_2_1_0()); }
	ruleParameterType{ after(grammarAccess.getParameterElementAccess().getTypesParameterTypeParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterType__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypeAccess().getValueNameWithWCTerminalRuleCall_0_0()); }
	RULE_NAMEWITHWC{ after(grammarAccess.getParameterTypeAccess().getValueNameWithWCTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterType__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterTypeAccess().getValueFullStopFullStopKeyword_1_0()); }
(
{ before(grammarAccess.getParameterTypeAccess().getValueFullStopFullStopKeyword_1_0()); }

	'..' 

{ after(grammarAccess.getParameterTypeAccess().getValueFullStopFullStopKeyword_1_0()); }
)

{ after(grammarAccess.getParameterTypeAccess().getValueFullStopFullStopKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Throws__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getThrowsAccess().getValueNameWithWCTerminalRuleCall_1_0()); }
	RULE_NAMEWITHWC{ after(grammarAccess.getThrowsAccess().getValueNameWithWCTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodName__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodNameAccess().getValueNameWithWCTerminalRuleCall_0()); }
	RULE_NAMEWITHWC{ after(grammarAccess.getMethodNameAccess().getValueNameWithWCTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_NAMEWITHWC : ('a'..'z'|'A'..'Z'|'_'|'*'|'?') ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'*'|'?'|'.')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


