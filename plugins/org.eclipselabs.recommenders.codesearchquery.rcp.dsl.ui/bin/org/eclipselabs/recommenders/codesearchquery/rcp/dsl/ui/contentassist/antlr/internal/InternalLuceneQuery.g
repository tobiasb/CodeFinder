/*
* generated by Xtext
*/
grammar InternalLuceneQuery;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.recommenders.codesearchquery.rcp.dsl.services.LuceneQueryGrammarAccess;

}

@parser::members {
 
 	private LuceneQueryGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LuceneQueryGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleExp1
entryRuleExp1 
:
{ before(grammarAccess.getExp1Rule()); }
	 ruleExp1
{ after(grammarAccess.getExp1Rule()); } 
	 EOF 
;

// Rule Exp1
ruleExp1
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExp1Access().getGroup()); }
(rule__Exp1__Group__0)
{ after(grammarAccess.getExp1Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExp2
entryRuleExp2 
:
{ before(grammarAccess.getExp2Rule()); }
	 ruleExp2
{ after(grammarAccess.getExp2Rule()); } 
	 EOF 
;

// Rule Exp2
ruleExp2
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExp2Access().getAlternatives()); }
(rule__Exp2__Alternatives)
{ after(grammarAccess.getExp2Access().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClauseExpression
entryRuleClauseExpression 
:
{ before(grammarAccess.getClauseExpressionRule()); }
	 ruleClauseExpression
{ after(grammarAccess.getClauseExpressionRule()); } 
	 EOF 
;

// Rule ClauseExpression
ruleClauseExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClauseExpressionAccess().getClauseAssignment()); }
(rule__ClauseExpression__ClauseAssignment)
{ after(grammarAccess.getClauseExpressionAccess().getClauseAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClause
entryRuleClause 
:
{ before(grammarAccess.getClauseRule()); }
	 ruleClause
{ after(grammarAccess.getClauseRule()); } 
	 EOF 
;

// Rule Clause
ruleClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClauseAccess().getGroup()); }
(rule__Clause__Group__0)
{ after(grammarAccess.getClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFieldValue
entryRuleFieldValue 
:
{ before(grammarAccess.getFieldValueRule()); }
	 ruleFieldValue
{ after(grammarAccess.getFieldValueRule()); } 
	 EOF 
;

// Rule FieldValue
ruleFieldValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFieldValueAccess().getAlternatives()); }
(rule__FieldValue__Alternatives)
{ after(grammarAccess.getFieldValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getGroup()); }
(rule__Value__Group__0)
{ after(grammarAccess.getValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BooleanExp
ruleBooleanExp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getAlternatives()); }
(rule__BooleanExp__Alternatives)
{ after(grammarAccess.getBooleanExpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getAlternatives()); }
(rule__NotExpression__Alternatives)
{ after(grammarAccess.getNotExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule FieldName
ruleFieldName
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldNameAccess().getAlternatives()); }
(rule__FieldName__Alternatives)
{ after(grammarAccess.getFieldNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Exp2__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp2Access().getValueAssignment_0()); }
(rule__Exp2__ValueAssignment_0)
{ after(grammarAccess.getExp2Access().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getExp2Access().getGroup_1()); }
(rule__Exp2__Group_1__0)
{ after(grammarAccess.getExp2Access().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getValueParserRuleCall_0()); }
	ruleValue
{ after(grammarAccess.getFieldValueAccess().getValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFieldValueAccess().getGroup_1()); }
(rule__FieldValue__Group_1__0)
{ after(grammarAccess.getFieldValueAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getPlusSignKeyword_0_0()); }

	'+' 

{ after(grammarAccess.getValueAccess().getPlusSignKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getHyphenMinusKeyword_0_1()); }

	'-' 

{ after(grammarAccess.getValueAccess().getHyphenMinusKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getValueAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1_1()); }
	RULE_STRING
{ after(grammarAccess.getValueAccess().getSTRINGTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpAccess().getAnd1EnumLiteralDeclaration_0()); }
(	'AND' 
)
{ after(grammarAccess.getBooleanExpAccess().getAnd1EnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpAccess().getAnd2EnumLiteralDeclaration_1()); }
(	'and' 
)
{ after(grammarAccess.getBooleanExpAccess().getAnd2EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBooleanExpAccess().getOr1EnumLiteralDeclaration_2()); }
(	'OR' 
)
{ after(grammarAccess.getBooleanExpAccess().getOr1EnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBooleanExpAccess().getOr2EnumLiteralDeclaration_3()); }
(	'or' 
)
{ after(grammarAccess.getBooleanExpAccess().getOr2EnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getNot1EnumLiteralDeclaration_0()); }
(	'not' 
)
{ after(grammarAccess.getNotExpressionAccess().getNot1EnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getNot2EnumLiteralDeclaration_1()); }
(	'NOT' 
)
{ after(grammarAccess.getNotExpressionAccess().getNot2EnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getNotExpressionAccess().getNot3EnumLiteralDeclaration_2()); }
(	'!' 
)
{ after(grammarAccess.getNotExpressionAccess().getNot3EnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FieldName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldNameAccess().getFullyQualifiedNameEnumLiteralDeclaration_0()); }
(	'FullyQualifiedName' 
)
{ after(grammarAccess.getFieldNameAccess().getFullyQualifiedNameEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getTypeEnumLiteralDeclaration_1()); }
(	'type' 
)
{ after(grammarAccess.getFieldNameAccess().getTypeEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getFriendlyNameEnumLiteralDeclaration_2()); }
(	'FriendlyName' 
)
{ after(grammarAccess.getFieldNameAccess().getFriendlyNameEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getImplementedTypesEnumLiteralDeclaration_3()); }
(	'ImplementedTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getImplementedTypesEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getExtendedTypesEnumLiteralDeclaration_4()); }
(	'ExtendedTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getExtendedTypesEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getDeclaredMethodsEnumLiteralDeclaration_5()); }
(	'DeclaredMethods' 
)
{ after(grammarAccess.getFieldNameAccess().getDeclaredMethodsEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedTypesEnumLiteralDeclaration_6()); }
(	'UsedTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedTypesEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedTypesInTryEnumLiteralDeclaration_7()); }
(	'UsedTypesInTry' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedTypesInTryEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedTypesInFinallyEnumLiteralDeclaration_8()); }
(	'UsedTypesInFinally' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedTypesInFinallyEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getParameterTypesEnumLiteralDeclaration_9()); }
(	'ParameterTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getParameterTypesEnumLiteralDeclaration_9()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getParameterCountEnumLiteralDeclaration_10()); }
(	'ParameterCount' 
)
{ after(grammarAccess.getFieldNameAccess().getParameterCountEnumLiteralDeclaration_10()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getReturnTypeEnumLiteralDeclaration_11()); }
(	'ReturnType' 
)
{ after(grammarAccess.getFieldNameAccess().getReturnTypeEnumLiteralDeclaration_11()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getReturnVariableEexpressionsEnumLiteralDeclaration_12()); }
(	'ReturnVariableEexpressions' 
)
{ after(grammarAccess.getFieldNameAccess().getReturnVariableEexpressionsEnumLiteralDeclaration_12()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedMethodsEnumLiteralDeclaration_13()); }
(	'UsedMethods' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedMethodsEnumLiteralDeclaration_13()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedMethodsInTryEnumLiteralDeclaration_14()); }
(	'UsedMethodsInTry' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedMethodsInTryEnumLiteralDeclaration_14()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedMethodsInFinallyEnumLiteralDeclaration_15()); }
(	'UsedMethodsInFinally' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedMethodsInFinallyEnumLiteralDeclaration_15()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getOverriddenMethodsEnumLiteralDeclaration_16()); }
(	'OverriddenMethods' 
)
{ after(grammarAccess.getFieldNameAccess().getOverriddenMethodsEnumLiteralDeclaration_16()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getAllImplementedTypesEnumLiteralDeclaration_17()); }
(	'AllImplementedTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getAllImplementedTypesEnumLiteralDeclaration_17()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getAllExtendedTypesEnumLiteralDeclaration_18()); }
(	'AllExtendedTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getAllExtendedTypesEnumLiteralDeclaration_18()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getFieldTypeEnumLiteralDeclaration_19()); }
(	'FieldType' 
)
{ after(grammarAccess.getFieldNameAccess().getFieldTypeEnumLiteralDeclaration_19()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getDeclaringTypeEnumLiteralDeclaration_20()); }
(	'DeclaringType' 
)
{ after(grammarAccess.getFieldNameAccess().getDeclaringTypeEnumLiteralDeclaration_20()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getCaughtTypeEnumLiteralDeclaration_21()); }
(	'CaughtType' 
)
{ after(grammarAccess.getFieldNameAccess().getCaughtTypeEnumLiteralDeclaration_21()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getProjectNameEnumLiteralDeclaration_22()); }
(	'ProjectName' 
)
{ after(grammarAccess.getFieldNameAccess().getProjectNameEnumLiteralDeclaration_22()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getResourcePathEnumLiteralDeclaration_23()); }
(	'ResourcePath' 
)
{ after(grammarAccess.getFieldNameAccess().getResourcePathEnumLiteralDeclaration_23()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getModifiersEnumLiteralDeclaration_24()); }
(	'Modifiers' 
)
{ after(grammarAccess.getFieldNameAccess().getModifiersEnumLiteralDeclaration_24()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getAllDeclaredMethodNamesEnumLiteralDeclaration_25()); }
(	'AllDeclaredMethodNames' 
)
{ after(grammarAccess.getFieldNameAccess().getAllDeclaredMethodNamesEnumLiteralDeclaration_25()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getDeclaredMethodNamesEnumLiteralDeclaration_26()); }
(	'DeclaredMethodNames' 
)
{ after(grammarAccess.getFieldNameAccess().getDeclaredMethodNamesEnumLiteralDeclaration_26()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getDeclaredFieldNamesEnumLiteralDeclaration_27()); }
(	'DeclaredFieldNames' 
)
{ after(grammarAccess.getFieldNameAccess().getDeclaredFieldNamesEnumLiteralDeclaration_27()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getDeclaredFieldTypesEnumLiteralDeclaration_28()); }
(	'DeclaredFieldTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getDeclaredFieldTypesEnumLiteralDeclaration_28()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getAllDeclaredFieldNamesEnumLiteralDeclaration_29()); }
(	'AllDeclaredFieldNames' 
)
{ after(grammarAccess.getFieldNameAccess().getAllDeclaredFieldNamesEnumLiteralDeclaration_29()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getFullTextEnumLiteralDeclaration_30()); }
(	'FullText' 
)
{ after(grammarAccess.getFieldNameAccess().getFullTextEnumLiteralDeclaration_30()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getFieldsReadEnumLiteralDeclaration_31()); }
(	'FieldsRead' 
)
{ after(grammarAccess.getFieldNameAccess().getFieldsReadEnumLiteralDeclaration_31()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getFieldsWrittenEnumLiteralDeclaration_32()); }
(	'FieldsWritten' 
)
{ after(grammarAccess.getFieldNameAccess().getFieldsWrittenEnumLiteralDeclaration_32()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedFieldsInFinallyEnumLiteralDeclaration_33()); }
(	'UsedFieldsInFinally' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedFieldsInFinallyEnumLiteralDeclaration_33()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getUsedFieldsInTryEnumLiteralDeclaration_34()); }
(	'UsedFieldsInTry' 
)
{ after(grammarAccess.getFieldNameAccess().getUsedFieldsInTryEnumLiteralDeclaration_34()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getAnnotationsEnumLiteralDeclaration_35()); }
(	'Annotations' 
)
{ after(grammarAccess.getFieldNameAccess().getAnnotationsEnumLiteralDeclaration_35()); }
)

    |(
{ before(grammarAccess.getFieldNameAccess().getInstanceofTypesEnumLiteralDeclaration_36()); }
(	'InstanceofTypes' 
)
{ after(grammarAccess.getFieldNameAccess().getInstanceofTypesEnumLiteralDeclaration_36()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Exp1__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp1__Group__0__Impl
	rule__Exp1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getExp2ParserRuleCall_0()); }
	ruleExp2
{ after(grammarAccess.getExp1Access().getExp2ParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exp1__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp1__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getGroup_1()); }
(rule__Exp1__Group_1__0)*
{ after(grammarAccess.getExp1Access().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exp1__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp1__Group_1__0__Impl
	rule__Exp1__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getExp1LeftAction_1_0()); }
(

)
{ after(grammarAccess.getExp1Access().getExp1LeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exp1__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp1__Group_1__1__Impl
	rule__Exp1__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getBAssignment_1_1()); }
(rule__Exp1__BAssignment_1_1)
{ after(grammarAccess.getExp1Access().getBAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exp1__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp1__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getRightAssignment_1_2()); }
(rule__Exp1__RightAssignment_1_2)
{ after(grammarAccess.getExp1Access().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Exp2__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp2__Group_1__0__Impl
	rule__Exp2__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp2__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp2Access().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getExp2Access().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exp2__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp2__Group_1__1__Impl
	rule__Exp2__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp2__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp2Access().getExp1ParserRuleCall_1_1()); }
	ruleExp1
{ after(grammarAccess.getExp2Access().getExp1ParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exp2__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exp2__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp2__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp2Access().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getExp2Access().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Clause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clause__Group__0__Impl
	rule__Clause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getNAssignment_0()); }
(rule__Clause__NAssignment_0)?
{ after(grammarAccess.getClauseAccess().getNAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clause__Group__1__Impl
	rule__Clause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getFieldAssignment_1()); }
(rule__Clause__FieldAssignment_1)
{ after(grammarAccess.getClauseAccess().getFieldAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clause__Group__2__Impl
	rule__Clause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getClauseAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Clause__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Clause__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getValueAssignment_3()); }
(rule__Clause__ValueAssignment_3)
{ after(grammarAccess.getClauseAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FieldValue__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group_1__0__Impl
	rule__FieldValue__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getFieldValueAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldValue__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group_1__1__Impl
	rule__FieldValue__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getValueParserRuleCall_1_1()); }
(	ruleValue)*
{ after(grammarAccess.getFieldValueAccess().getValueParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FieldValue__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FieldValue__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldValue__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFieldValueAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getFieldValueAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Value__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Value__Group__0__Impl
	rule__Value__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getAlternatives_0()); }
(rule__Value__Alternatives_0)?
{ after(grammarAccess.getValueAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Value__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Value__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getAlternatives_1()); }
(rule__Value__Alternatives_1)
{ after(grammarAccess.getValueAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Exp1__BAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getBBooleanExpEnumRuleCall_1_1_0()); }
	ruleBooleanExp{ after(grammarAccess.getExp1Access().getBBooleanExpEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exp1__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp1Access().getRightExp2ParserRuleCall_1_2_0()); }
	ruleExp2{ after(grammarAccess.getExp1Access().getRightExp2ParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exp2__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExp2Access().getValueClauseExpressionParserRuleCall_0_0()); }
	ruleClauseExpression{ after(grammarAccess.getExp2Access().getValueClauseExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClauseExpression__ClauseAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseExpressionAccess().getClauseClauseParserRuleCall_0()); }
	ruleClause{ after(grammarAccess.getClauseExpressionAccess().getClauseClauseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__NAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getNNotExpressionEnumRuleCall_0_0()); }
	ruleNotExpression{ after(grammarAccess.getClauseAccess().getNNotExpressionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__FieldAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getFieldFieldNameEnumRuleCall_1_0()); }
	ruleFieldName{ after(grammarAccess.getClauseAccess().getFieldFieldNameEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Clause__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClauseAccess().getValueFieldValueParserRuleCall_3_0()); }
	ruleFieldValue{ after(grammarAccess.getClauseAccess().getValueFieldValueParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


