/*
* generated by Xtext
*/
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclipselabs.recommenders.codesearchquery.rcp.dsl.services.LuceneQueryGrammarAccess;

public class LuceneQueryParser extends AbstractContentAssistParser {
	
	@Inject
	private LuceneQueryGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal.InternalLuceneQueryParser createParser() {
		org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal.InternalLuceneQueryParser result = new org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal.InternalLuceneQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExp2Access().getAlternatives(), "rule__Exp2__Alternatives");
					put(grammarAccess.getFieldValueAccess().getAlternatives(), "rule__FieldValue__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives_0(), "rule__Value__Alternatives_0");
					put(grammarAccess.getValueAccess().getAlternatives_1(), "rule__Value__Alternatives_1");
					put(grammarAccess.getBooleanExpAccess().getAlternatives(), "rule__BooleanExp__Alternatives");
					put(grammarAccess.getNotExpressionAccess().getAlternatives(), "rule__NotExpression__Alternatives");
					put(grammarAccess.getFieldNameAccess().getAlternatives(), "rule__FieldName__Alternatives");
					put(grammarAccess.getExp1Access().getGroup(), "rule__Exp1__Group__0");
					put(grammarAccess.getExp1Access().getGroup_1(), "rule__Exp1__Group_1__0");
					put(grammarAccess.getExp2Access().getGroup_1(), "rule__Exp2__Group_1__0");
					put(grammarAccess.getClauseAccess().getGroup(), "rule__Clause__Group__0");
					put(grammarAccess.getFieldValueAccess().getGroup_1(), "rule__FieldValue__Group_1__0");
					put(grammarAccess.getValueAccess().getGroup(), "rule__Value__Group__0");
					put(grammarAccess.getExp1Access().getBAssignment_1_1(), "rule__Exp1__BAssignment_1_1");
					put(grammarAccess.getExp1Access().getRightAssignment_1_2(), "rule__Exp1__RightAssignment_1_2");
					put(grammarAccess.getExp2Access().getValueAssignment_0(), "rule__Exp2__ValueAssignment_0");
					put(grammarAccess.getClauseExpressionAccess().getClauseAssignment(), "rule__ClauseExpression__ClauseAssignment");
					put(grammarAccess.getClauseAccess().getNAssignment_0(), "rule__Clause__NAssignment_0");
					put(grammarAccess.getClauseAccess().getFieldAssignment_1(), "rule__Clause__FieldAssignment_1");
					put(grammarAccess.getClauseAccess().getValueAssignment_3(), "rule__Clause__ValueAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal.InternalLuceneQueryParser typedParser = (org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist.antlr.internal.InternalLuceneQueryParser) parser;
			typedParser.entryRuleExp1();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LuceneQueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LuceneQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
