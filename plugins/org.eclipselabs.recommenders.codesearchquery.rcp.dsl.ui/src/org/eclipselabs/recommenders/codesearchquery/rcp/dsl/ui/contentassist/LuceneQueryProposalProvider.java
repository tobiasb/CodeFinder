/*
* generated by Xtext
*/
package org.eclipselabs.recommenders.codesearchquery.rcp.dsl.ui.contentassist;

import java.util.HashMap;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.common.collect.Maps;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class LuceneQueryProposalProvider extends AbstractLuceneQueryProposalProvider {
	
	private static HashMap<QueryProposalType, IQueryProposalProvider> provider = Maps.newHashMap();
		
	public static void addQueryProposalProvider(QueryProposalType type, IQueryProposalProvider provider) {
		LuceneQueryProposalProvider.provider.put(type, provider);
	}
	
	@Override
	public void complete_TypeFieldValue(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		
		fillProposals(QueryProposalType.TYPE, context, acceptor);
	}
	
	@Override
	public void complete_FilePathFieldValue(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		fillProposals(QueryProposalType.FILE_PATH, context, acceptor);
	}
	
	@Override
	public void complete_ModifierFieldValue(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		
		fillProposals(QueryProposalType.MODIFIER, context, acceptor);
	}
	
	private void fillProposals(QueryProposalType proposalType, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {

		IQueryProposalProvider p = provider.get(proposalType);
		
		if(p != null) {
			for(String type : p.getProposals()) {
				acceptor.accept(createCompletionProposal(p.convert(type), context));
			}
		}
	}
}
