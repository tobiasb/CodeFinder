packages "org.eclipselabs.recommenders.codesearch.rcp" "org.eclipselabs.recommenders.codesearch.rcp.dsl.ui"
class Fields 
//\\ref{tab:FieldTableSimpleField}
SimpleField {
	QUALIFIED_NAME 		= "FullyQualifiedName" 
	{ class, method, field, trycatch }
	("The unique represantation of the entity. Abbreviated as \\cquote{FQN}")
	//Wrong category
   
	SIMPLE_NAME 				= "FriendlyName" 
	{ class, method, field, trycatch }
	("Simple version of the entity's name")
	
	RETURN_VARIABLE_EXPRESSIONS = "ReturnVariableExpressions" 
	{ method }
	("Expression returned by a method, e.g, \"return true;\"")

	ALL_DECLARED_METHOD_NAMES 	= "AllDeclaredMethodNames"
	{ class }
	("Simple versions of all declared methods within, across the entire hierarchy") 
	
	DECLARED_METHODS_NAMES 		= "DeclaredMethodNames"
	{ class }
	("Simple versions of all declared methods within")
	 
	DECLARED_FIELD_NAMES	 	= "DeclaredFieldNames"
	{ class, method,trycatch }
	("Simple names of all declared fields")
	 
	ALL_DECLARED_FIELD_NAMES 	= "AllDeclaredFieldNames"
	{ class, method, trycatch }
	("Simple names of all declared fields, across the entire hierarchy")
	 
	FULL_TEXT 					= "FullText"
	{ class, method, field, trycatch }
	("Full text representation of the entire entity")
	
	FIELDS_READ 				= "FieldsRead"
	{ class, method, trycatch }
	("The FQNs of the fields read within the entity. E.g, \\cvalue{SomeType.someField}")
	//Wrong category
	
	FIELDS_WRITTEN				= "FieldsWritten"
	{ method, trycatch }
	("The FQNs of the fields written within the entity. E.g, \\cvalue{SomeType.someField}")
	//Wrong category
	 
	USED_FIELDS_IN_FINALLY		= "UsedFieldsInFinally"
	{ trycatch }
	("The FQNs of the fields used within the finally-block. E.g, \\cvalue{SomeType.someField}")
	//Wrong category
	
	USED_FIELDS_IN_TRY			= "UsedFieldsInTry"
	{ trycatch }
	("The FQNs of the fields used within the try-block. E.g, \\cvalue{SomeType.someField}")
	//Wrong category
	
	VARIABLE_NAME				= "VariableName"
	{ varusage }
	("Variable name of a variable usage")
	
	PARAMETER_TYPES_STRUCTURAL	= "ParameterTypesStructural"
	{ method }
	("Textual representation of a methods parameter list used \\textbf{internally} by MethodPatternQL (see \\ref{sec:MethodPatternQL})")
}("If the value of a field is plain text it is considered a simple field. No postprocessing is done to search terms that are used with a simple field when triggering the search. They usually contain names or expressions that do not have a special semantic.")

TypeField {
	IMPLEMENTED_TYPES 			= "ImplementedTypes" 
	{ class } 
	("FQNs of types (interfaces) implemented by the entity")
  
	EXTENDED_TYPE 				= "ExtendedTypes" 
	{ class }
	("FQN of the type the class has extended")
	 
	USED_TYPES					= "UsedTypes"
	{ class, method, field, trycatch }
	("Contains FQNs of all types used within the entity")
	
	USED_TYPES_IN_TRY 			= "UsedTypesInTry" 
	{ trycatch }
	("Contains FQNs of all types used within the try-block")
	
	USED_TYPES_IN_FINALLY		= "UsedTypesInFinally" 
	{ trycatch }
	("Contains FQNs of all types used within the finally-block")
	
	PARAMETER_TYPES 			= "ParameterTypes" 
	{ method }
	("Contains the FQNs of all types used in the parameter list of the method")
	
	RETURN_TYPE					= "ReturnType" 
	{ method }
	("Contains the FQN of type returned by the method")
	
	INSTANCEOF_TYPES			= "InstanceofTypes" 
	{ class, method, trycatch }
	("Contains the FQNs of all types used in \\cquote{instanceof} checks within the entity")
	
	ALL_IMPLEMENTED_TYPES 		= "AllImplementedTypes"
	{ class }
	("FQNs of types (interfaces) implemented by the entity across the entire hierarchy")
	
	ALL_EXTENDED_TYPES 			= "AllExtendedTypes"
	{ class }
	("FQNs of the types the class has extended across the entire hierarchy")
	
	FIELD_TYPE 					= "FieldType"
	{ field }
	("FQN of the field's type")
	
	CAUGHT_TYPE 				= "CaughtType"
	{ trycatch }
	("FQN of the catch-block's caught type")
	
	DECLARED_FIELD_TYPES 		= "DeclaredFieldTypes"
	{ class, method, trycatch }
	("Contains FQNs of the types declared within the entity")
	
	DECLARING_TYPE 				= "DeclaringType"
	{ method, field, trycatch }
	("The FQN of the entity's declaring type, e.g., a methods class or a catch-blocks method")
	
	VARIABLE_TYPE				= "VariableType"
	{ varusage }
	("The FQN of the used variable's type")
	
	CHECKED_EXCEPTIONS			= "CheckedExceptions"
	{ method }
	("The FQN of the checked exceptions possibly thrown by a method")
} 
("Field values in that category represent type names. 
Type names are fully qualified names of types, e.g, classes and interfaces. 
In Java they follow a certain pattern. Their names consist of a package name and the name of the type. 
Internally this format is called dot-notation. For example \\cquote{java.util.List} is an interface. 
The name of the type is \\cvalue{List}, the name of the package is \\cvalue{java.util}.

What is saved in the index is not this dot-notated syntax but a syntax providing more information. It is borrowed from CodeRecommenders' \\cquote{BindingHelper}. 
By using the syntax that is used across the whole CodeRecommenders product range the compatibility between the search engine and those potential consumers is provided. 
For types that syntax does not look all that different than the usual dot-notation. The internal representation of the aforementioned type \\cquote{java.util.List} is \\cquote{Ljava/util/List}.  
")


MethodField {
	USED_METHODS 				= "UsedMethods" 
	{ class, method, trycatch }
	("")
	
	USED_METHODS_IN_TRY 		= "UsedMethodsInTry" 
	{ trycatch }
	("")
	
	USED_METHODS_IN_FINALLY 	= "UsedMethodsInFinally"
	{ trycatch }
	("")
	
	OVERRIDDEN_METHODS	 		= "OverriddenMethods"
	{ class }
	("")
	
	DECLARED_METHODS 			= "DeclaredMethods" 
	{ class }
	("")
	
	DECLARING_METHOD			= "DeclaringMethod"
	{ varusage }
	("")
	
	USED_AS_PARAMETER_IN_METHODS="UsedAsParameterInMethods"
	{ varusage }
	("")
	
	USED_AS_TAGET_FOR_METHODS	="UsedAsTargetForMethods"
	{ varusage }
	("")
}
("")
  
FilePathField {
	RESOURCE_PATH 				= "ResourcePath"
	{ class, method, field, trycatch }
	("Local file path to the current entity's source code file")
}
("When a field represents a file path it is contained in this category. 
Regardless of the local operating system all path names are persisted in unix style, e.g., \\cquote{/users/bob/sourcecode} and \\cquote{c:/users/bob/sourcecode}. 
Since the colon \\cquote{:} is a special Lucene character that seperates a field name from its value it must be escaped when used inside a search term.
This escapint is done for all search terms used with fields in this category.")
 
NumberField {
	PARAMETER_COUNT 			= "ParameterCount" 
	{ method }
	("Number of parameters that are defined in a method's parameter list")
}
("")

ModifierField {	
	MODIFIERS 					= "Modifiers"
	{ class, method, field }
	("Modifiers that are defined for the entity")
}
("")

TimeField {
	TIMESTAMP 					= "Timestamp"
	{ class, method, field, trycatch }
	("Timestamp of the document's entity's last indexing time. Measured in milliseconds since January 1, 1970.")
}
("")

DocumentTypeField {
	TYPE 						= "Type" 
	{ class, method, field, trycatch, varusage }
	("Defines the type of the entity represented by the document.")
}
("")

ProjectNameField {	
	PROJECT_NAME 				= "ProjectName"
	{ class, method, field, trycatch }
	("")
}
("")

AnnotationField {	
	ANNOTATIONS					= "Annotations"
	{ class }
	("")
}
("")

DefinitionType {
	VARIABLE_DEFINITION					= "VariableDefinition"
	{ varusage }
	("")
}
("")