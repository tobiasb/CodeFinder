class Fields 
 
DocumentTypeField {
	TYPE 						= "Type" 
	{ type, method, field, trycatch, varusage }
	("Defines the type of the entity represented by the document.")
}  
("By design, every document in the search index itself is equal. 
For the search index, a document is just a container for the fields it contains. For \\cname, this is obviously not the case. 
There it does matter whether a document represents a method or a class. 
A document type field is used to indicate an entity's type. The following five values are valid for a field representing a document type.
    
\\begin{itemize}
	\\item \\includegraphics[width=0.9em]{img-src/icons/type.png} \\textbf{type} Entity is a class, interface or enumeration
	\\item \\includegraphics[width=0.9em]{img-src/icons/method.png} \\textbf{method} Entity is a class' method definition
	\\item \\includegraphics[width=0.9em]{img-src/icons/field.png} \\textbf{field} Entity is a field, i.e. a local member variable of a class
	\\item \\includegraphics[width=0.9em]{img-src/icons/trycatch.png} \\textbf{trycatch} Entity represents either a try-block, a catch-block or a finally-block
	\\item \\includegraphics[width=0.9em]{img-src/icons/varusage.png} \\textbf{varusage} Entity is the usage of a local variable
\\end{itemize}

Every document in the index is of one of those document types. That is why every document in the index is guaranteed to have exactly one document type field. 
This is not the case for every other field that will be described here. Some fields only make sense for certain entities, i.e. document types.
To illustrate what entities a field is used with, each field description in this section contains the symbols of the target entities, i.e. document types, 
that the field is indexed for and can be used with.
These symbols correspond with the ones in the enumeration above. 
")

SimpleField {   
	SIMPLE_NAME 				= "FriendlyName" 
	{ type, method, field, trycatch }
	("Simple version of the entity's name")
	
	RETURN_VARIABLE_EXPRESSIONS = "ReturnVariableExpressions" 
	{ method }
	("Expression returned by a method, e.g., \"return true;\"")

	ALL_DECLARED_METHOD_NAMES 	= "AllDeclaredMethodNames"
	{ type }
	("Simple versions of all declared methods within, across the entire hierarchy") 
	
	DECLARED_METHODS_NAMES 		= "DeclaredMethodNames"
	{ type }
	("Simple versions of all declared methods within")
	 
	DECLARED_FIELD_NAMES	 	= "DeclaredFieldNames"
	{ type, method,trycatch }
	("Simple names of all declared fields")
	 
	ALL_DECLARED_FIELD_NAMES 	= "AllDeclaredFieldNames"
	{ type, method, trycatch }
	("Simple names of all declared fields, across the entire hierarchy")
	 
	FULL_TEXT 					= "FullText"
	{ type, method, field, trycatch }
	("Full text representation of the entire entity, including names of structural elements, implementation comments as well as documentation")
	
	FIELDS_READ 				= "FieldsRead"
	{ type, method, trycatch }
	("The FQNs of the fields read from within the entity. E.g., \\cvalue{SomeType.someField}")
	
	FIELDS_WRITTEN				= "FieldsWritten"
	{ method, trycatch }
	("The FQNs of the fields written to within the entity. E.g., \\cvalue{SomeType.someField}")
	 
	USED_FIELDS_IN_FINALLY		= "UsedFieldsInFinally"
	{ trycatch }
	("The FQNs of the fields used within the finally-block. E.g., \\cvalue{SomeType.someField}")
	
	USED_FIELDS_IN_TRY			= "UsedFieldsInTry"
	{ trycatch }
	("The FQNs of the fields used within the try-block. E.g., \\cvalue{SomeType.someField}")
	
	VARIABLE_NAME				= "VariableName"
	{ varusage }
	("Variable name of a variable usage")
	
	PARAMETER_TYPES_STRUCTURAL	= "ParameterTypesStructural"
	{ method }
	("Textual representation of a methods parameter list used \\textbf{internally} by MethodPatternQL (see \\ref{sec:MethodPatternQL})")
		
	ANNOTATIONS					= "Annotations"
	{ type }
	("")
}("If the value of a field is plain text it is considered a simple field. 
No post-processing is done to search terms that are used with a simple field when triggering the search. 
They usually contain names or expressions that do not have a special semantic.")

TypeField {
	QUALIFIED_NAME 		= "FullyQualifiedName" 
	{ type, method, field, trycatch }
	("The unique representation of the entity. Abbreviated as \\cquote{FQN}")
	
	IMPLEMENTED_TYPES 			= "ImplementedTypes" 
	{ type } 
	("FQN of types (interfaces) implemented by the entity")
  
	EXTENDED_TYPE 				= "ExtendedTypes" 
	{ type }
	("FQN of the type the class has extended")
	 
	USED_TYPES					= "UsedTypes"
	{ type, method, field, trycatch }
	("Contains the FQN of all types used within the entity")
	
	USED_TYPES_IN_TRY 			= "UsedTypesInTry" 
	{ trycatch }
	("Contains the FQN of all types used within the try-block")
	
	USED_TYPES_IN_FINALLY		= "UsedTypesInFinally" 
	{ trycatch }
	("Contains FQNs of all types used within the finally-block")
	
	PARAMETER_TYPES 			= "ParameterTypes" 
	{ method }
	("Contains the FQNs of all types used in the parameter list of the method")
	
	RETURN_TYPE					= "ReturnType" 
	{ method }
	("Contains the FQN of type returned by the method")
	
	INSTANCEOF_TYPES			= "InstanceofTypes" 
	{ type, method, trycatch }
	("Contains the FQN of all types used in \\cquote{instanceof} checks within the entity")
	
	ALL_IMPLEMENTED_TYPES 		= "AllImplementedTypes"
	{ type }
	("FQN of the type (interface) the type has implemented directly as well as the FQN of the types (interfaces) implemented indirectly by the type across the entire hierarchy"
	)
	
	ALL_EXTENDED_TYPES 			= "AllExtendedTypes"
	{ type }
	("FQN of the type that the class has extended directly as well as the FQN of the types the class has extended indirectly across the entire hierarchy")
	
	FIELD_TYPE 					= "FieldType"
	{ field }
	("FQN of the field's type")
	
	CAUGHT_TYPE 				= "CaughtType"
	{ trycatch }
	("FQN of the catch-block's caught type")
	
	DECLARED_FIELD_TYPES 		= "DeclaredFieldTypes"
	{ type, method, trycatch }
	("Contains the FQN of the types declared within the entity")
	 
	DECLARING_TYPE 				= "DeclaringType"
	{ method, field, trycatch }
	("The FQN of the entity's declaring type, e.g., a methods class or a catch-blocks method")
	
	VARIABLE_TYPE				= "VariableType"
	{ varusage }
	("The FQN of the used variable's type")
	
	CHECKED_EXCEPTIONS			= "CheckedExceptions"
	{ method }
	("The FQN of the checked exceptions possibly thrown by a method")
}  
("Field values in that category represent type names. 
Type names are fully qualified names of types, e.g., classes and interfaces. 
In Java they follow a certain pattern. Their names consist of a package name and the name of the type. 
Internally this format is called dot-notation. For example \\cquote{java.util.List} is an interface. 
The name of the type is \\cvalue{List}, the name of the package is \\cvalue{java.util}.

What is saved in the index is not this dot-notated syntax but a syntax providing more information. It is borrowed from CodeRecommenders' \\cquote{BindingHelper}. 
By using the syntax that is used across the whole CodeRecommenders product range the compatibility between the search engine and those potential consumers is provided. 
For types that syntax does not look all that different than the usual dot-notation. The internal representation of the aforementioned type \\cquote{java.util.List} is \\cquote{Ljava/util/List}.

When entering a field value that represents a type field \\cname supports the type entry with content assist. 
Using the internal index cache the set of types that are already contained in the index are proposed.

At search time type fields further receive special processing. When searching for types these types can be entered using their fully qualified name, e.g., \\cquote{java.lang.String}.
But it is also possible just to use the name of the type, e.g., \\cquote{String}. 
Since types are saved using their FQN representation this would lead to a poor search experience since String would never be found because its name is basically incomplete. 
That is why internally this fielded term is prepended with a wildcard operator to include the types \\cquote{String} of all packages by searching for \\cvalue{*.String}.
")


MethodField {
	USED_METHODS 				= "UsedMethods" 
	{ type, method, trycatch }
	("FQN of the methods that are being called from within the entity. In case of a try/catch-construct called from within the catch-block")
	
	USED_METHODS_IN_TRY 		= "UsedMethodsInTry" 
	{ trycatch }
	("FQN of the methods that are being called from within the entity's try-block")
	
	USED_METHODS_IN_FINALLY 	= "UsedMethodsInFinally"
	{ trycatch }
	("FQN of the methods that are being called from within the entity's finally-block")
	
	OVERRIDDEN_METHODS	 		= "OverriddenMethods"
	{ type }
	("FQN of the methods that are being overridden by a method definition")
	
	DECLARED_METHODS 			= "DeclaredMethods" 
	{ type }
	("FQN of methods that are being declared inside an entity")
	
	DECLARING_METHOD			= "DeclaringMethod"
	{ varusage }
	("FQN of the method that the entity has been declared in")
	
	USED_AS_PARAMETER_IN_METHODS="UsedAsParameterInMethods"
	{ varusage }
	("FQN of the method that a variable has been used as a parameter with")
	
	USED_AS_TAGET_FOR_METHODS	="UsedAsTargetForMethods"
	{ varusage }
	("FQN of the method that has been called on a variable")
}
("This category contains all fields that represent methods.
The notation is similar to the one used for types (see \\ref{sec:FieldCategoryTypeField}). 
The names are fully qualified for example \\cquote{java.util.List.add(Object)}. 

\\cname uses its internal cache to provide content assist functionality when entering a search term that represents a method.
")
   
FilePathField {
	RESOURCE_PATH 				= "ResourcePath"
	{ type, method, field, trycatch }
	("Local file path to the current entity's source code file")
} 
("When a field represents a file path it is contained in this category. 
Regardless of the local operating system all path names are persisted in unix style, e.g., \\cquote{/users/bob/sourcecode} and \\cquote{c:/users/bob/sourcecode}. 
Since the colon \\cquote{:} is a special Lucene character that separates a field name from its value it must be escaped when used inside a search term.
This escaping is done for all search terms used with fields in this category.")
  
NumberField {
	PARAMETER_COUNT 			= "ParameterCount" 
	{ method }
	("Number of parameters that are defined in a method's parameter list")
	
	TIMESTAMP 					= "Timestamp"
	{ type, method, field, trycatch }
	("Timestamp of the document's entity's last indexing time. Measured in milliseconds since January 1, 1970")
}
("This category contains fields that represent numeric values. 
The \\cname user interface makes sure that values entered here are valid.
There is no immediate content assist associated with numeric values at the moment.")

ModifierField {	
	MODIFIERS 					= "Modifiers"
	{ type, method, field }
	("Modifiers that are defined for the entity")
}
("
\\begin{itemize}
	\\item \\textbf{public}
	\\item \\textbf{final}
	\\item \\textbf{private}
	\\item \\textbf{protected}
	\\item \\textbf{static}
	\\item \\textbf{abstract}
\\end{itemize}
")
 
ProjectNameField {	
	PROJECT_NAME 				= "ProjectName"
	{ type, method, field, trycatch }
	("Name of the project the entity's source code file is a part of")
}
("This category contains field(s) that represent a name of an Eclipse project. 
The name itself is just a plain text string that might as well fit into the simple field category (see \\ref{sec:FieldCategorySimpleField}).
However special treatment is performed when it comes to content assist in the user interface while entering a search term. 
When entering project name fields the UI proposes those project names that are currently in the workspace.
")

DefinitionType {
	VARIABLE_DEFINITION					= "VariableDefinition"
	{ varusage }
	("The way a variable of a variable usage has been declared")
}
("When indexing the usage patterns of variables it might be important to know how the variable has been defined, 
i.e. how the developer declared it.
The following values are possible:
 
\\begin{itemize}
	\\item \\textbf{parameter} A variable has been declared as a method parameter
	\\item \\textbf{nullLiteral} The variable has been declared and assigned \\lstinline|null|
	\\item \\textbf{assignment} The variable has been declared and assigned a value such as the return value of a method call or a string literal
	\\item \\textbf{instanceCreation} The variable has been declared and initialized with a \\lstinline|new| statement
	\\item \\textbf{uninitialized} A variable declared without being initialized
	%TODO what about int x = y;?
\\end{itemize}
")